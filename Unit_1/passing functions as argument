COMEDY_1 = {
    "title": "Recursion",
    "genre": "Intrigue",
    "rating": 2.0,
    "release_year": 1999
}
COMEDY_2 = {
    "title": "Zero Dark Python",
    "genre": "Intrigue",
    "rating": 3.0,
    "release_year": 2022
}
ACTION_1 = {
    "title": "2 JavaScript 2 React",
    "genre": "Action",
    "rating": 4.2,
    "release_year": 2015
}
ACTION_2 = {
    "title": "JavaScript 3: VS Code Lint",
    "genre": "Action",
    "rating": 3.5,
    "release_year": 2013
}

movies = [COMEDY_1, COMEDY_2, ACTION_1, ACTION_2]


Part 1. Finding the movie dict with the first title alphabetically

# pseudocode for part 1:
# define the function and its parameter (movies)
# create a variable for the first title and assign it as the movies' first element
# create a loop to go through each of the list elements in the global movies variable
# use an if condition to check if the key "title" inside each of the dict is sorted alphabetically less (lexicographically) than the key "title" of the first movie variable
# (if it is then) set the first title variable as the dict
# return the first title's variable to show that full dict that has the first title sorted alphabetically
# call the function name with the movies list as the argument

def get_first_movie(movies):
    min_movie = movies[0]
    for movie in movies:
        if movie['title'] < min_movie["title"]:
            min_movie = movie
    return min_movie
    
get_first_movie(movies)

Part 2: Finding the movie dict with the earliest release date:

# pseudocode:
# define the function and its parameter (movies)
# create a variable for the first release year and assign it as the movies' first element
# create a loop to go through each of the list elements in the global movies variable
# use an if condition to check if the key "release_year" inside each of the dict is sorted numberically less than the key "release_year" of the first release year variable
# (if it is then) set the first release year variable as the dict
# return the first release year's variable to show that full dict with the earliest release year
# call the function name with the movies list as the argument

def get_earliest_movie(movies):
    first_release_year = movies[0]
    for dict in movies:
        if dict['release_year'] < first_release_year["release_year"]:
            first_release_year = dict
    return first_release_year
    
get_earliest_movie(movies)


Part 3: Finding the movie dict with the lowest rating:

# pseudocode:
# define the function and its parameter (movies)
# create a variable for the lowest rating and assign it as the movies' first element
# create a loop to go through each of the list elements in the global movies variable
# use an if condition to check if the key "rating" inside each of the dict is sorted numberically less than the key "rating" of the lowest rating variable
# (if it is then) set the lowest rating variable as the dict
# return the lowest rating variable to show that full dict with the lowest rating
# call the function name with the movies list as the argument

def get_lowest_rated_movie(movies):
    lowest_rating = movies[0]
    for dict in movies:
        if dict['rating'] < lowest_rating["rating"]:
            lowest_rating = dict
    return lowest_rating
    
get_lowest_rated_movie(movies)
