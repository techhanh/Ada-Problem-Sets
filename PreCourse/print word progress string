Write a helper function print_word_progress_string that takes two parameters, a word and a dictionary where each letter in the word is a key and the values are True or False. The function returns a string that represents the word, with spaces between each letter. For each letter, if the value in the dictionary is True, the letter is displayed. If the value in the dictionary is False, the letter is replaced with a _ character.

This function will need to:
    -Create an empty string
    -Loop over each letter in the word
    -Check if the letter has been guessed or not
    - If the (argumented value of "guessed" is `True` add the letter to the string
    - If the (argument) value of "guessed" is `False` add '_' to the string
    -Add 1 space between each letter/underscore

# pseudocode:
# define a print word progress string function with 2 parameters (the word and a dict letter as key with boolean value)
# create an output string and set it as an empty string (if the letter is in the word, it will print to the output string, if not, it will print an underscore to the empty string)
# create a number of letters in word count variable and start the count at 0 (checks to see how many letters are there in the word)
# create a for loop to check each iterated value (letter) in the word
# then create an if statement to check if the number of letters in word count is greater than 0
# (if it is) the output string variable will be incremented by itself and with an empty string with a space in it (this is to separate the guess/unguess letters from each other with a space in between it to better visualize it)
# create another if statement to check if the letter is part of the dict letter as key with boolean value variable (the dict's value is argumented as True, which means the letter has been guessed)
# (under the second if statement) the output string variable will be incremented by itself with the letter (this is to output the letter that has been guessed correctly in the output string variable)
# (if the dict's value is argumented as False, this means the letter has not been guessed yet) create an else statement and use the output string variable to incremented itself with the underscore string
# (outside of the second if statement) use the number of letters in word count variable and increment it to itself and increase by 1 (this moves on to check the next letter in the word)
# (outside of the for loop) return the output string so that it can output what has been guessed already and what has not been guess yet (shown as an underscore)
# call the function with the arguments


def print_word_progress_string(word, dict_letter_as_key_with_boolean_value):
    output_string = ""
    num_of_letters_in_word_count = 0

    for letter in word:
      if num_of_letters_in_word_count > 0:
        output_string += " "

      if dict_letter_as_key_with_boolean_value[letter]:
        output_string += letter
      else:
        output_string += "_"

      num_of_letters_in_word_count += 1

    return output_string


print(print_word_progress_string("pepper", {"p":True, "e": False, "r": False})) # p _ p p _ _    # False
print(print_word_progress_string("tiger", {"e":False, "g": False, "i": False, "r": False, "t": False})) # _ _ _ _ _    # False
print(print_word_progress_string("swap", {"a":True, "m": True, "p": True, "s": True, "w": True})) # s w a p    # True
