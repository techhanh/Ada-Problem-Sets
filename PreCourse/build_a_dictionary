Write a function `build_a_dictionary` that takes two arguments, a list of keys and a list of values. The function has the following behavior:
    - Verify that the inputs are valid (the inputs are valid if the two lists match in length)
    - Create a new dictionary that contains all of the keys and values
    - The keys and values must be matched in order, ie, the key at index 0 in the key list goes with the value at index 0 in the value list
    - Return the new dictionary or None if the inputs are not valid


# pseudocode:
# create a dict name with the 2 parameters (a key list and a value list)
# create a dict variable and set it to be an empty dict (the final ouput will be shown in here)
# create an if statement to check if the length of the key list parameter matches that of the length of the value list parameter
# (if it does, under the if statement) create a for loop with the iterated value (elements of that list) in the range of the length of the key list parameter
# (under the for loop) use the iterated value inside the keylist paramter that is inside the dict variable and assign it to be the iterated value inside the value list parameter
# (if it does not, outside of the for loop) create an else statement and return None
# return the dict variable to show the final output in a dict format
# call the function name with the arguments


def build_a_dictionary(key_list, value_list):
  dict = {}

  if len(key_list) == len(value_list):
    for i in range(len(key_list)):
      dict[key_list[i]] = value_list[i]
  else:
    return None

  return dict


print(build_a_dictionary(["dog", "cat", "bird", "mouse"], [1, 2, 3, 4])) # {"dog":1, "cat":2, "bird":3, "mouse":4}
print(build_a_dictionary([1, 2, 3, 4], ["dog", "cat", "bird", "mouse"])) # {1: "dog", 2: "cat", 3: "bird", 4: "mouse"}
print(build_a_dictionary([1, 2,], ["dog", "cat", "bird", "mouse"])) # None
print(build_a_dictionary(["dog", "cat", "bird", "mouse"], [])) # None
