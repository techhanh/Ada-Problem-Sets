# Part 1
Directions:
1. The user is presented with a list of underscores "_". Each Underscore represents one letter in a word.
2. The user guesses letters for the hidden word
    - For each correct guess, a letter will be replace the corresponding underscore.
    - For every wrong guess we are going to remember the number of wrong guesses and print out more and more of a snowman drawing.
3. When the snowman is finished and the user is out of guesses, they lose the game.
4. Use the constant SNOWMAN_WORD

Tips:
1. First, we will need to use `input` to get a string from the user and store it in a variable.
2. Second, we need to check to see if the input is valid.
    - In `get_number_from_user`, we used `isnumeric()` to ensure that the input was a number. In this function, we need to check to see if the input is a letter, and if the input contains only one letter.
        - `letter_from_user.isalpha()` will return `True` if the string variable `letter_from_user` contains only alphabetical characters
        - `len(letter_from_user)` will tell us the length of the string
3. Lastly, we need to return the input string
    - If the user gives bad input:
        - We print "Invalid letter please enter a single character."
        - Then return the input.
    - If the user gives valid input:
        - Then we just return the input.
        
      
SNOWMAN_WORD = "snowman"

def get_letter_from_user():
  user_input_letter = input("Please enter a letter: ") # allows the user to choose a letter

  if user_input_letter.isalpha() and len(user_input_letter) == 1: # checks if inputted value is a letter and is only 1 letter
    return user_input_letter
  else:
    print("Invalid letter, please enter a single character.")

def snowman():
  user_input_letter = get_letter_from_user() # use the previous function's as an assigned value
  if user_input_letter in SNOWMAN_WORD:
    print("Letter found")
    return True
  else:
    print("Letter not found")
    return False

snowman()


# Part 2
Directions:
Create another function call snowman. Check if the letter is in the word or not. To do that, we're going to use the python keyword `in`. The syntax for `in` is `thing1 in thing2`. This expression evaluates to `True` if `thing2` contains `thing1`, and false otherwise. We can use it in a conditional expression as `if thing1 in thing2:`.
1. First, use `get_letter_from_user` to get a letter
2. Check if the letter is in `SNOWMAN_WORD`
    - print "Letter found" if the letter is in `SNOWMAN_WORD`.
    - print "Letter not found" if it's not in `SNOWMAN_WORD`.
3. If the letter is in `SNOWMAN_WORD` return `True` otherwise return `False` if it's not in `SNOWMAN_WORD`.


SNOWMAN_WORD = "snowman"

def get_letter_from_user():
  user_input_letter = input("Please enter a letter: ") # allows the user to choose a letter

  if user_input_letter.isalpha() and len(user_input_letter) == 1: # checks if inputted value is a letter and is only 1 letter
    return user_input_letter
  else:
    print("Invalid letter, please enter a single character.")

def snowman():
  user_input_letter = get_letter_from_user() # use the previous function's as an assigned value
  if user_input_letter in SNOWMAN_WORD:
    print("Letter found")
    return True
  else:
    print("Letter not found")
    return False

snowman()


# Part 3A
Add a while loop to the function get_letter_from_user.

SNOWMAN_WORD = "snowman"

def get_letter_from_user():
  attempt_valid_input = True
  user_input_letter = None

  while attempt_valid_input:
    user_input_letter = input("Please enter a letter: ") # allows the user to choose a letter

    if user_input_letter.isalpha() and len(user_input_letter) == 1: # checks if inputted value is a letter and is only 1 letter
      return user_input_letter
    else:
      print("Invalid letter, please enter a single alphabetical character only.")

get_letter_from_user()


# Part 3B
- Add a loop to the function snowman.
- Add two counters:  correct_guess and wrong_guess.
- Adjust the loop to allow the user to continue to guess until they reach the SNOWMAN_WRONG_GUESS constant. If the number of correct_guess is equal to the length of SNOWMAN_WORD, then the word has been guessed correctly and the user should no longer be able to submit anymore guesses.
- Use the helper function get_letter_from_user to get user input in the loop.
- Track the number of correct and incorrect guesses, adding one to the proper counter when the user makes a guess.
- When finish, print out, “You made X correct and Y incorrect guesses”, where X and Y are the number of correct and incorrect guesses.

SNOWMAN_WORD = "snowman"

def get_letter_from_user():
  attempt_valid_input = True
  user_input_letter = None

  while attempt_valid_input:
    user_input_letter = input("Please enter a letter: ") # allows the user to choose a letter

    if user_input_letter.isalpha() and len(user_input_letter) == 1: # checks if inputted value is a letter and is only 1 letter
      attempt_valid_input = False

      return user_input_letter
    else:
      print("Invalid input, please enter a single alphabetical character only.")


SNOWMAN_WRONG_GUESS_ALLOWED = 7

def snowman():
  continue_guess_letter = True
  correct_guess = 0
  wrong_guess = 0

  while wrong_guess < SNOWMAN_WRONG_GUESS_ALLOWED and correct_guess < len(SNOWMAN_WORD):
    user_input_letter = get_letter_from_user() # use the previous function's as an assigned value

    if str(user_input_letter) in SNOWMAN_WORD:
      correct_guess += 1
    else:
      wrong_guess += 1
      
  print(f"You made {correct_guess} correct guess and {wrong_guess} wrong guess attempts.")  

snowman()


# Part 3C
- Define another function to draw the snowman. Add these ASCII snowman drawing constants to the top of the code file. For each wrong guess, we will want to add a new element to the drawing. The goal is to have a helper function that is use to pass the wrong_guess count value to it and it will draw the appropriate amount of the snowman. (For example, if the WRONG_GUESS_ALLOWED reaches 7, then the SNOWMAN_7 drawing will be printed.
- Now we're going to add a for loop inside this function to make it draw not just one element of the snowman, but all of the elements
  (use for loop since we know exactly how many times the loop needs to repeat (which is the the number of times the WRONG_GUESS_ALLOWED is assigned to)
- The next step is to modify the range of our for loop to only print the elements that we want. For Snowman, we want to draw our snowman from the ground up, so if we have only 1 incorrect guess, we want to print the last element, 2 incorrect guesses means the last two elements, and so on. Our function should take in the number of incorrect guesses and use that value in the range to draw the elements of the snowman in the order that we want.
- Finally, inside of the `snowman`function, add the `print_snowman`function call to the game loop to print out the current state of the snowman to the user after each guess.

# The ASCII snowman drawing:
SNOWMAN_1 = '*   *   *  '
SNOWMAN_2 = ' *   _ *   '
SNOWMAN_3 = '   _[_]_ * '
SNOWMAN_4 = '  * (")    '
SNOWMAN_5 = '  \( : )/ *'
SNOWMAN_6 = '* (_ : _)  '
SNOWMAN_7 = '-----------'


# pseucode for Part 3C:
# define a draw snowman function with a wrong guess attempt parameter
# create a for loop with the iterated value is in range (the for loop is use in part 3 because there is a known amount of repetition involve, which is the number of wrong guess allowed)
# set the start of the range to be the wrong guess allowed variable + 1 minus the wrong guess attempt variable (this is so the previous drawing is not repeating itself and only continuing on from where the drawing last left off at)
# set end of the range to be the wrong guess allowed variable + 1 (the +1 is to make it inclusive of the last wrong guess allowed value)
# under the for loop, create an if statement where the iterated value is equal to 1 and create a print statement with the first part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the second part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the third part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the fourth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the fifth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the sixth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the seventh part of the snowman variable
# (if haven't done yet), call the draw snowman function with the wrong guess argument at the end of the else statement in Part 2
# at the end of your code, call the snowman function to run all 3 functions together

# pseudocode for Part 3A:
# create a snowman word variable and assign a string to it (the user will try to guess this word)
# create another variable to allow the number of wrong guesses allowed for this string
# create your drawing and and assign it to each new variable
# define a function name to get a letter from the user
# create a new variable to check the letter inputted in and set it as True (this will use to check later if the character inputted in fulfil the condition set up or not)
# set up a while loop to check the leter inputted in (the while loop will remain true until the attempt valid input variable is False)
# within the while loop action block, create another variable to get the user input letter and assign the input function to it. Include the instructions telling the user what to
# create an if statement (inside the while loop) to check if the user input letter is an alpha and the length of the user input letter is equal to 1
# (if this true), set the check letter inputted variable to False (so the while loop will exit if the if statement fulfills both the condition)
# return the user input letter so the function can output it
# (if one of the 2 condition is false) create an else statement to print a statement telling the user how to fulfill both of the conditions 


# PART 3A
SNOWMAN_WORD = "snowman"
WRONG_GUESS_ALLOWED = 7

SNOWMAN_1 = '*   *   *  '
SNOWMAN_2 = ' *   _ *   '
SNOWMAN_3 = '   _[_]_ * '
SNOWMAN_4 = '  * (")    '
SNOWMAN_5 = '  \( : )/ *'
SNOWMAN_6 = '* (_ : _)  '
SNOWMAN_7 = '-----------'


def get_letter_from_user():
  check_letter_inputted = True

  while check_letter_inputted:
    user_input_letter = input("Please enter one letter: ")

    if user_input_letter.isalpha() and len(user_input_letter) == 1:
      check_letter_inputted = False

      return user_input_letter
    else:
      print("Invalid input, please enter a single alphabetical character only.")


# pseudocode for Part 3B:
# define a snowman function
# create a correct guess variable and assign it to start the count at 0
# create a wrong guess variable and assign it to start the count at 0
# set up a while loop and set the condition where the wrong guess variable is less than the wrong guess allowed constant
# within the while loop action block, use the user input letter variable (that was created in part 1), and assign the previous function name to it
# create an if statement with the user input letter to check if it is in the snowman word constant
# (if it is) create a print statement to show the letter was guess correctly
# to increment the number of correct guess, asssign the correct guess variable to itself and increment it by 1
# (if it is not) create an else statement and print the statement to show that the user input leter is not in the word
# to increment the number of wrong guess, assign the wrong guess variable to itself and increment it by 1
# call the draw snowman function with the wrong guess as an argument (this function will be created later in Part 3) (the step is to output each of the snowman drawing for every wrong guess)
# print a statement telling the user what the final correct guess and wrong guess counts are (this step is outside of the while loop)


# PART 3B
def snowman():
  correct_guess = 0
  wrong_guess = 0

  while wrong_guess < WRONG_GUESS_ALLOWED:
    user_input_letter = get_letter_from_user()

    if user_input_letter in SNOWMAN_WORD:
      print("You guessed a correct letter that's in the word. Keep going!\n")
      correct_guess += 1
    else:
      print(f"The letter {user_input_letter} is not in the word. Try a different letter!\n")
      wrong_guess += 1
    draw_snowman(wrong_guess)
      
  print(f"Game Over!\nYou made {correct_guess} correct guess and {wrong_guess} wrong guess attempts.")  


# pseucode for Part 3C:
# define a draw snowman function with a wrong guess attempt parameter
# create a for loop with the iterated value is in range (the for loop is use in part 3 because there is a known amount of repetition involve, which is the number of wrong guess allowed)
# set the start of the range to be the wrong guess allowed variable + 1 minus the wrong guess attempt variable (this is so the previous drawing is not repeating itself and only continuing on from where the drawing last left off at)
# set end of the range to be the wrong guess allowed variable + 1 (the +1 is to make it inclusive of the last wrong guess allowed value)
# under the for loop, create an if statement where the iterated value is equal to 1 and create a print statement with the first part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the second part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the third part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the fourth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the fifth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the sixth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the seventh part of the snowman variable
# (if haven't done yet), call the draw snowman function with the wrong guess argument at the end of the else statement in Part 2
# at the end of your code, call the snowman function to run all 3 functions together


# PART 3C
def draw_snowman(wrong_guess_attempt):

  for i in range(WRONG_GUESS_ALLOWED + 1 - wrong_guess_attempt, WRONG_GUESS_ALLOWED + 1):
    if i == 1:
      print(SNOWMAN_1)
    elif i == 2:
      print(SNOWMAN_2)
    elif i == 3:
      print(SNOWMAN_3)    
    elif i == 4:
      print(SNOWMAN_4)   
    elif i == 5:
      print(SNOWMAN_5)
    elif i == 6:
      print(SNOWMAN_6)
    elif i == 7:
      print(SNOWMAN_7)


snowman()


# PART 4A:
1. Before we can use it in our code, we will need to install the package using the command line. To install, copy pasta this into your terminal:
2. Once that's done, add the line `from wonderwords import RandomWord` to the top of our file.
    
    -This will import the class `RandomWord` for us to use in our code.
    
3. Next, add the constants `SNOWMAN_MAX_WORD_LENGTH = 8` and `SNOWMAN_MIN_WORD_LENGTH = 5` with the other constants at the top of the file.
4. Then, add the following lines of code to the top of the `snowman`
 function:

 r = RandomWord()
    snowman_word = r.word(
      word_min_length=SNOWMAN_MIN_WORD_LENGTH,
      word_max_length=SNOWMAN_MAX_WORD_LENGTH)
      
 5. The last piece of adding our new random word is replacing the constant SNOWMAN_WORD
 in the conditional test inside of the snowman
 function with the new snowman_word
 variable.
 
# Part 4 codes only:
import random
from wonderwords import RandomWord

SNOWMAN_MIN_WORD_LENGTH = 5
SNOWMAN_MAX_WORD_LENGTH = 8

def snowman():
  r = RandomWord()
  snowman_word = r.word(
    word_min_length=SNOWMAN_MIN_WORD_LENGTH, 
    word_max_length=SNOWMAN_MAX_WORD_LENGTH)

  correct_guess = 0
  wrong_guess = 0

  while wrong_guess < WRONG_GUESS_ALLOWED:
    user_input_letter = get_letter_from_user()

    if user_input_letter in snowman_word:
      print("You guessed a correct letter that's in the word. Keep going!\n")
      correct_guess += 1
    else:
      print(f"The letter {user_input_letter} is not in the word. Try a different letter!\n")
      wrong_guess += 1
    draw_snowman(wrong_guess)
      
  print(f"Game Over!\nYou made {correct_guess} correct guess and {wrong_guess} wrong guess attempts.")
  
  
 Part 4B: Tracking User Input
- To track incorrect guesses, use a list to find a way to store as many or as little wrong guesses as it needs to, and will allow the codes to be more flexible and easier to modify.
    1. Start by addding an incorrect guesses list variable to the top of the `snowman` function:.
    2. Next we need to add each incorrect guess to the list. We are going to do this with the list function `append`which adds elements to the end of the list.
    3. In the previous version, we were incrementing a variable `wrong_guesses`
     each time the user guessed a letter that was not in the word, and then using that variable in the test for our while loop. We can continue to use this variable, but we can use our list instead and simplify our code. The number of elements in `wrong_letter_guess` is the number of incorrect guesses, so we can use the length of the list instead of the counter variable. We get the length of the list by using the len() function. We can also use the length of the list when we call the print_snowman function.


Updated codes:
# pseudocode:
# import random from wonderwords and import RandWord
# create a snowman minimum word length constant and assign as 5
# create a snowman maximum word length constant and assign as 8
# create another constant to allow the number of wrong guesses allowed for this string
# create your drawing and and assign it to each new variable
# define a function name to get a letter from the user
# create a new variable to check the letter inputted in and set it as True (this will use to check later if the character inputted in fulfil the condition set up or not)
# set up a while loop to check the leter inputted in (the while loop will remain true until the attempt valid input variable is False)
# within the while loop action block, create another variable to get the user input letter and assign the input function to it. Include the instructions telling the user what to
# create an if statement (inside the while loop) to check if the user input letter is an alpha and the length of the user input letter is equal to 1
# (if this true), set the check letter inputted variable to False (so the while loop will exit if the if statement fulfills both the condition)
# return the user input letter so the function can output it
# (if one of the 2 condition is false) create an else statement to print a statement telling the user how to fulfill both of the conditions 

import random
from wonderwords import RandomWord

SNOWMAN_MIN_WORD_LENGTH = 5
SNOWMAN_MAX_WORD_LENGTH = 8
WRONG_GUESS_ALLOWED = 7

SNOWMAN_1 = '*   *   *  '
SNOWMAN_2 = ' *   _ *   '
SNOWMAN_3 = '   _[_]_ * '
SNOWMAN_4 = '  * (")    '
SNOWMAN_5 = '  \( : )/ *'
SNOWMAN_6 = '* (_ : _)  '
SNOWMAN_7 = '-----------'


def get_letter_from_user():
  check_letter_inputted = True

  while check_letter_inputted:
    user_input_letter = input("Please enter one letter: ")

    if user_input_letter.isalpha() and len(user_input_letter) == 1:
      check_letter_inputted = False
      return user_input_letter
    else:
      print("Invalid input, please enter a single alphabetical character only.")
      
      
# pseudocode:
# define a snowman function
# create a r (short for random) variable and assign the RandomWord function to it
# create a snowman word variable and assign the r.word module to start with the word min length variable as the snowman min word length constant, and stop with the word max length variable as the snowman max word length constant
# create a wrong letter guess variable and assign an empty list to it (this will be use to store the wrong letters the user has inputted)
# set up a while loop with the length of the wrong letter guess variable and assign it as less than the wrong guess allowed constant
# (under the while loop), use the user input letter variable (that was created in part 1), and assign the previous function name to it
# create an if statement with the user input letter to check if it is in the snowman word variable
# (if it is) create a print statement to show the letter was guess correctly
# (if it is not) create an else statement and print the statement to show that the user input leter is not in the word
# (under the else statement) use the wrong letter guess variable and append it to the user input letter variable (this will add all the wrong letter user has inputted to the empty list)
# (outside of the while loop) call the draw snowman function to get the length of the wrong letter guess (this will how many wrong letters the user has inputted)
# print a statement telling the user what the final correct guess and wrong guess counts are (this step is outside of the while loop)     

def snowman():
  r = RandomWord()
  snowman_word = r.word(
    word_min_length=SNOWMAN_MIN_WORD_LENGTH, 
    word_max_length=SNOWMAN_MAX_WORD_LENGTH)

  wrong_letter_guess = []
  
  
UPDATED CODES:
# pseudocode:
# import random from wonderwords and import RandWord
# create a snowman minimum word length constant and assign as 5
# create a snowman maximum word length constant and assign as 8
# create another constant to allow the number of wrong guesses allowed for this string
# create your drawing and and assign it to each new variable
# define a function name to get a letter from the user with the wrong letter guess as a parameter
# create a new variable to check the letter inputted in and set it as True (this will use to check later if the character inputted in fulfil the condition set up or not)
# set up a while loop with the check the letter inputted variable (the while loop will remain true until the attempt valid input variable is False)
# (under the while loop) create another variable to get the user input letter and assign the input function to it. Include the instructions telling the user what to
# create an if statement to check if the user input letter variable is in the wrong letter guess parameter
# print a statement telling the user that this letter has already been guess and to try a different letter
# (if it is not) create an elif statement to check if the user input letter is an alpha (character) and the length of the user input letter is exactly 1
# set the check letter inputted variable to False (so the while loop will exit if the if statement fulfills both of the condition stated above)
# (if one of the 2 condition is false) create an else statement to print a statement telling the user to input in a single character only
# (outside of the while loop) return the user input letter so the function can output it
  
def snowman():
  r = RandomWord()
  snowman_word = r.word(
    word_min_length=SNOWMAN_MIN_WORD_LENGTH, 
    word_max_length=SNOWMAN_MAX_WORD_LENGTH)

  correct_letter_guess = []
  wrong_letter_guess = []

  while len(wrong_letter_guess) < WRONG_GUESS_ALLOWED:
    user_input_letter = get_letter_from_user(wrong_letter_guess)

    if user_input_letter in snowman_word:
      print("You've guessed a correct letter that's in the secret word. Keep going!\n")
      correct_letter_guess.append(user_input_letter)
    else:
      print(f"The letter {user_input_letter} is not in the secret word. Try a different letter!\n")
      wrong_letter_guess.append(user_input_letter)
      
  draw_snowman(len(wrong_letter_guess))

  print(f"You've guessed the wrong letters: {wrong_letter_guess}")
  print(f"The letters you've guessed correctly: {correct_letter_guess}")
  print(f"The secret word is: {snowman_word}")

  
# pseucodes 
# define a draw snowman function with a wrong guess attempt parameter
# create a for loop with the iterated value is in range (the for loop is use in part 3 because there is a known amount of repetition involve, which is the number of wrong guess allowed)
# set the start of the range to be the wrong guess allowed variable + 1 minus the wrong guess attempt variable (this is so the previous drawing is not repeating itself and only continuing on from where the drawing last left off at)
# set end of the range to be the wrong guess allowed variable + 1 (the +1 is to make it inclusive of the last wrong guess allowed value)
# under the for loop, create an if statement where the iterated value is equal to 1 and create a print statement with the first part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the second part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the third part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the fourth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the fifth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the sixth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the seventh part of the snowman variable
# (if haven't done yet), call the draw snowman function with the wrong guess argument at the end of the else statement in Part 2
# at the end of your code, call the snowman function to run all 3 functions together


  while len(wrong_letter_guess) < WRONG_GUESS_ALLOWED:
    user_input_letter = get_letter_from_user()

    if user_input_letter in snowman_word:
      print("You guessed a correct letter that's in the word. Keep going!\n")
    else:
      print(f"The letter {user_input_letter} is not in the word. Try a different letter!\n")
      wrong_letter_guess.append(user_input_letter)
      
  draw_snowm(len(wrong_letter_guess))
  print(wrong_letter_guess)


def draw_snowman(wrong_guess_attempt):

  for i in range(WRONG_GUESS_ALLOWED + 1 - wrong_guess_attempt, WRONG_GUESS_ALLOWED + 1):
    if i == 1:
      print(SNOWMAN_1)
    elif i == 2:
      print(SNOWMAN_2)
    elif i == 3:
      print(SNOWMAN_3)    
    elif i == 4:
      print(SNOWMAN_4)   
    elif i == 5:
      print(SNOWMAN_5)
    elif i == 6:
      print(SNOWMAN_6)
    elif i == 7:
      print(SNOWMAN_7)


snowman()


Part 4C: Using `wrong_letter guess` in `get_letter_from_user`

- Now that we have a list incorrect guesses, we can use them in the helper function `get_letter_from_user` to prevent our user from inputting the same incorrect letter multiple times.
    1. The first step is to pass the variable `wrong_letter guess` to `get_letter_from_user` as an argument.
    2. Next, We will need to update our function definition of `get_letter_from_user` with a new parameter.
    3. Last, we need to use the new information inside of `get_letter_from_user`.
        - Python lists provide us with a handy `in` operator (syntax `item in list`) that returns `True` if the item is in the list and `False` if it is not.

import random
from wonderwords import RandomWord

SNOWMAN_MIN_WORD_LENGTH = 5
SNOWMAN_MAX_WORD_LENGTH = 8
WRONG_GUESS_ALLOWED = 7

SNOWMAN_1 = '*   *   *  '
SNOWMAN_2 = ' *   _ *   '
SNOWMAN_3 = '   _[_]_ * '
SNOWMAN_4 = '  * (")    '
SNOWMAN_5 = '  \( : )/ *'
SNOWMAN_6 = '* (_ : _)  '
SNOWMAN_7 = '-----------'

def get_letter_from_user(wrong_letter_guess):
  check_letter_inputted = True

  while check_letter_inputted:
    user_input_letter = input("Please enter one letter: ")

    if user_input_letter in wrong_letter_guess:
      print("This letter has already been guess, please try a different letter.\n")
    elif user_input_letter.isalpha() and len(user_input_letter) == 1:
      check_letter_inputted = False
    else:
      print("Invalid input, please enter a single alphabetical character only.\n")

  return user_input_letter
  
  def snowman():
  r = RandomWord()
  snowman_word = r.word(
    word_min_length=SNOWMAN_MIN_WORD_LENGTH, 
    word_max_length=SNOWMAN_MAX_WORD_LENGTH)

  correct_letter_guess = []
  wrong_letter_guess = []

  while len(wrong_letter_guess) < WRONG_GUESS_ALLOWED:
  
# pseudocode
# define a snowman function
# create a r (short for random) variable and assign the RandomWord function to it
# create a snowman word variable and assign the r.word module to start with the word min length variable as the snowman min word length constant, and stop with the word max length variable as the snowman max word length constant
# create a correct letter guess variable and assign an empty list to it (this will be use to store the wrong letters the user has inputted)
# create a wrong letter guess variable and assign an empty list to it (this will be use to store the wrong letters the user has inputted)
# set up a while loop with the length of the wrong letter guess variable and assign it as less than the wrong guess allowed constant
# (under the while loop) use the user input letter variable (that was created in part 1), and assign the previous function name to it with the 2 parameters (correct letter guess and wrong letter guess)
# create an if function with the user input letter to check if it is in the snowman word variable
# create a print statement to show the letter was guess correctly
# use the correct letter guess variable and append it to the user input letter variable (this will add all the correct letter user has inputted into the empty list)
# (if it is not) create an else function and print the statement to show that the user input leter is not in the word and to try again
# (under the else statement) use the wrong letter guess variable and append it to the user input letter variable (this will add all the wrong letter user has inputted into the empty list)
# (outside of the while loop) call the draw snowman function to get the length of the wrong letter guess (this will how many wrong letters the user has inputted)
# print a statement telling the user what their wrong guess letters are and provide ther wrong letter guess list
# print a statement telling the user what their correct guess letters are and provide ther correct letter guess list
# print a statement telling the user what the secret word is
    user_input_letter = get_letter_from_user(wrong_letter_guess)

    if user_input_letter in snowman_word:
      print("You've guessed a correct letter that's in the secret word. Keep going!\n")
      correct_letter_guess.append(user_input_letter)
    else:
      print(f"The letter {user_input_letter} is not in the secret word. Try a different letter!\n")
      wrong_letter_guess.append(user_input_letter)
      
  draw_snowman(len(wrong_letter_guess))

def get_letter_from_user(correct_letter_guess, wrong_letter_guess):
  check_letter_inputted = True

  while check_letter_inputted:
    user_input_letter = input("Please enter one letter: ")

    if user_input_letter in wrong_letter_guess or user_input_letter in correct_letter_guess:
      print("You have already guess this letter, please try a different letter.\n")
    elif user_input_letter.isalpha() and len(user_input_letter) == 1:
      check_letter_inputted = False
    else:
      print("Invalid input, please enter a single alphabetical character only.\n")

  return user_input_letter
  print(f"You've guessed the wrong letters: {wrong_letter_guess}")
  print(f"The letters you've guessed correctly: {correct_letter_guess}")
  print(f"The secret word is: {snowman_word}")
# pseudocode:
# define a snowman function
# create a r (short for random) variable and assign the RandomWord function to it
# create a snowman word variable and assign the r.word module to start with the word min length variable as the snowman min word length constant, and stop with the word max length variable as the snowman max word length constant
# create a wrong letter guess variable and assign an empty list to it (this will be use to store the wrong letters the user has inputted)
# set up a while loop with the length of the wrong letter guess variable and assign it as less than the wrong guess allowed constant
# (under the while loop), use the user input letter variable (that was created in part 1), and assign the previous function name to it with the wrong letter guess as its parameter
# create an if statement with the user input letter to check if it is in the snowman word variable
# (if it is) create a print statement to show the letter was guess correctly
# (if it is not) create an else statement and print the statement to show that the user input leter is not in the word
# (under the else statement) use the wrong letter guess variable and append it to the user input letter variable (this will add all the wrong letter user has inputted to the empty list)
# (outside of the while loop) call the draw snowman function to get the length of the wrong letter guess (this will how many wrong letters the user has inputted)
# print a statement telling the user what the final correct guess and wrong guess counts are (this step is outside of the while loop)


def snowman():
  r = RandomWord()
  snowman_word = r.word(
    word_min_length=SNOWMAN_MIN_WORD_LENGTH, 
    word_max_length=SNOWMAN_MAX_WORD_LENGTH)

  wrong_letter_guess = []

  while len(wrong_letter_guess) < WRONG_GUESS_ALLOWED:
    user_input_letter = get_letter_from_user(wrong_letter_guess)

    if user_input_letter in snowman_word:
      print("You guessed a correct letter that's in the word. Keep going!\n")
    else:
      print(f"The letter {user_input_letter} is not in the word. Try a different letter!\n")
      wrong_letter_guess.append(user_input_letter)
      
  draw_snowman(len(wrong_letter_guess))
  print(wrong_letter_guess)


# pseucode:
# define a draw snowman function with a wrong guess attempt parameter
# create a for loop with the iterated value is in range (the for loop is use in part 3 because there is a known amount of repetition involve, which is the number of wrong guess allowed)
# set the start of the range to be the wrong guess allowed variable + 1 minus the wrong guess attempt variable (this is so the previous drawing is not repeating itself and only continuing on from where the drawing last left off at)
# set end of the range to be the wrong guess allowed variable + 1 (the +1 is to make it inclusive of the last wrong guess allowed value)
# under the for loop, create an if statement where the iterated value is equal to 1 and create a print statement with the first part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the second part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the third part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the fourth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the fifth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the sixth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the seventh part of the snowman variable
# (if haven't done yet), call the draw snowman function with the wrong guess argument at the end of the else statement in Part 2
# at the end of your code, call the snowman function to run all 3 functions together

def draw_snowman(wrong_guess_attempt):

  for i in range(WRONG_GUESS_ALLOWED + 1 - wrong_guess_attempt, WRONG_GUESS_ALLOWED + 1):
    if i == 1:
      print(SNOWMAN_1)
    elif i == 2:
      print(SNOWMAN_2)
    elif i == 3:
      print(SNOWMAN_3)    
    elif i == 4:
      print(SNOWMAN_4)   
    elif i == 5:
      print(SNOWMAN_5)
    elif i == 6:
      print(SNOWMAN_6)
    elif i == 7:
      print(SNOWMAN_7)


snowman()


Part 4D: Tracking Correct Letters

- At this point we are keeping track of the incorrect letters guessed and using those to provide feedback to our user when they guess a new letter. Now it is time to do the same thing but with correct letters!
    1. Add a `correct_guesses_list` to the `snowman` function
    2. Add correct guesses to the list
    
 UPDATED CODES:
# pseudocode
# import random from wonderwords and import RandWord
# create a snowman minimum word length constant and assign as 5
# create a snowman maximum word length constant and assign as 8
# create another constant to allow the number of wrong guesses allowed for this string
# create your drawing and and assign it to each new variable
# define a function name to get a letter from the user with the wrong letter guess as a parameter
# create a new variable to check the letter inputted in and set it as True (this will use to check later if the character inputted in fulfil the condition set up or not)
# set up a while loop with the check the letter inputted variable (the while loop will remain true until the attempt valid input variable is False)
# (under the while loop) create another variable to get the user input letter and assign the input function to it. Include the instructions telling the user what to
# create an if statement to check if the user input letter variable is in the wrong letter guess parameter
# print a statement telling the user that this letter has already been guess and to try a different letter
# (if it is not) create an elif statement to check if the user input letter is an alpha (character) and the length of the user input letter is exactly 1
# set the check letter inputted variable to False (so the while loop will exit if the if statement fulfills both of the condition stated above)
# (if one of the 2 condition is false) create an else statement to print a statement telling the user to input in a single character only
# (outside of the while loop) return the user input letter so the function can output it

import random
from wonderwords import RandomWord

SNOWMAN_MIN_WORD_LENGTH = 5
SNOWMAN_MAX_WORD_LENGTH = 8
WRONG_GUESS_ALLOWED = 7

SNOWMAN_1 = '*   *   *  '
SNOWMAN_2 = ' *   _ *   '
SNOWMAN_3 = '   _[_]_ * '
SNOWMAN_4 = '  * (")    '
SNOWMAN_5 = '  \( : )/ *'
SNOWMAN_6 = '* (_ : _)  '
SNOWMAN_7 = '-----------'

def get_letter_from_user(wrong_letter_guess):
  check_letter_inputted = True

  while check_letter_inputted:
    user_input_letter = input("Please enter one letter: ")

    if user_input_letter in wrong_letter_guess:
      print("This letter has already been guess, please try a different letter.\n")
    elif user_input_letter.isalpha() and len(user_input_letter) == 1:
      check_letter_inputted = False
    else:
      print("Invalid input, please enter a single alphabetical character only.\n")

  return user_input_letter


# define a snowman function
# create a r (short for random) variable and assign the RandomWord function to it
# create a snowman word variable and assign the r.word module to start with the word min length variable as the snowman min word length constant, and stop with the word max length variable as the snowman max word length constant
# create a correct letter guess variable and assign an empty list to it (this will be use to store the wrong letters the user has inputted)
# create a wrong letter guess variable and assign an empty list to it (this will be use to store the wrong letters the user has inputted)
# set up a while loop with the length of the wrong letter guess variable and assign it as less than the wrong guess allowed constant
# (under the while loop) use the user input letter variable (that was created in part 1), and assign the previous function name to it with the wrong letter guess as its parameter
# create an if function with the user input letter to check if it is in the snowman word variable
# create a print statement to show the letter was guess correctly
# use the correct letter guess variable and append it to the user input letter variable (this will add all the correct letter user has inputted into the empty list)
# (if it is not) create an else function and print the statement to show that the user input leter is not in the word and to try again
# (under the else statement) use the wrong letter guess variable and append it to the user input letter variable (this will add all the wrong letter user has inputted into the empty list)
# (outside of the while loop) call the draw snowman function to get the length of the wrong letter guess (this will how many wrong letters the user has inputted)
# print a statement telling the user what their wrong guess letters are and provide ther wrong letter guess list
# print a statement telling the user what their correct guess letters are and provide ther correct letter guess list
# print a statement telling the user what the secret word is

# define a draw snowman function with a wrong guess attempt parameter
# create a for loop with the iterated value is in range (the for loop is use in part 3 because there is a known amount of repetition involve, which is the number of wrong guess allowed)
# set the start of the range to be the wrong guess allowed variable + 1 minus the wrong guess attempt variable (this is so the previous drawing is not repeating itself and only continuing on from where the drawing last left off at)
# set end of the range to be the wrong guess allowed variable + 1 (the +1 is to make it inclusive of the last wrong guess allowed value)
# under the for loop, create an if statement where the iterated value is equal to 1 and create a print statement with the first part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the second part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the third part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the fourth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the fifth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the sixth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the seventh part of the snowman variable
# (if haven't done yet), call the draw snowman function with the wrong guess argument at the end of the else statement in Part 2
# at the end of your code, call the snowman function to run all 3 functions together

def draw_snowman(wrong_guess_attempt):

  for i in range(WRONG_GUESS_ALLOWED + 1 - wrong_guess_attempt, WRONG_GUESS_ALLOWED + 1):
    if i == 1:
      print(SNOWMAN_1)
    elif i == 2:
      print(SNOWMAN_2)
    elif i == 3:
      print(SNOWMAN_3)    
    elif i == 4:
      print(SNOWMAN_4)   
    elif i == 5:
      print(SNOWMAN_5)
    elif i == 6:
      print(SNOWMAN_6)
    elif i == 7:
      print(SNOWMAN_7)


snowman()


Part 4E: Using `correct_letter_guess` in `get_letter_from_user`

- Update the helper function `get_letter_from_user` so that it takes an additional argument (`correct_letter_guess`). Use this new argument along with `wrong_letter_guess`
 to print "You have already guessed that letter" as feedback to the user if the user has already guessed the letter.


UPDATED CODES:
# pseudocode:
# import random from wonderwords and import RandWord
# create a snowman minimum word length constant and assign as 5
# create a snowman maximum word length constant and assign as 8
# create another constant to allow the number of wrong guesses allowed for this string
# create your drawing and and assign it to each new variable
# define a function name to get a letter from the user with the 2 parameters (correct letter guess and wrong letter guess)
# create a new variable to check the letter inputted in and set it as True (this will use to check later if the character inputted in fulfil the condition set up or not)
# set up a while loop with the check the letter inputted variable (the while loop will remain true until the attempt valid input variable is False)
# (under the while loop) create another variable to get the user input letter and assign the input function to it. Include the instructions telling the user what to
# create an if statement to check if the user input letter variable is in the wrong letter guess parameter or if the user input letter variable is in the correct letter guess parameter
# print a statement telling the user that this letter has already been guess and to try a different letter
# (if it is not) create an elif statement to check if the user input letter is an alpha (character) and the length of the user input letter is exactly 1
# set the check letter inputted variable to False (so the while loop will exit if the if statement fulfills both of the condition stated above)
# (if one of the 2 condition is false) create an else statement to print a statement telling the user to input in a single character only
# (outside of the while loop) return the user input letter so the function can output it

import random
from wonderwords import RandomWord

SNOWMAN_MIN_WORD_LENGTH = 5
SNOWMAN_MAX_WORD_LENGTH = 8
WRONG_GUESS_ALLOWED = 7

SNOWMAN_1 = '*   *   *  '
SNOWMAN_2 = ' *   _ *   '
SNOWMAN_3 = '   _[_]_ * '
SNOWMAN_4 = '  * (")    '
SNOWMAN_5 = '  \( : )/ *'
SNOWMAN_6 = '* (_ : _)  '
SNOWMAN_7 = '-----------'

def get_letter_from_user(correct_letter_guess, wrong_letter_guess):
  check_letter_inputted = True

  while check_letter_inputted:
    user_input_letter = input("Please enter one letter: ")

    if user_input_letter in wrong_letter_guess or user_input_letter in correct_letter_guess:
      print("You have already guess this letter, please try a different letter.\n")
    elif user_input_letter.isalpha() and len(user_input_letter) == 1:
      check_letter_inputted = False
    else:
      print("Invalid input, please enter a single alphabetical character only.\n")

  return user_input_letter
  
  
# pseudocode
# define a snowman function
# create a r (short for random) variable and assign the RandomWord function to it
# create a snowman word variable and assign the r.word module to start with the word min length variable as the snowman min word length constant, and stop with the word max length variable as the snowman max word length constant
# create a correct letter guess variable and assign an empty list to it (this will be use to store the wrong letters the user has inputted)
# create a wrong letter guess variable and assign an empty list to it (this will be use to store the wrong letters the user has inputted)
# set up a while loop with the length of the wrong letter guess variable and assign it as less than the wrong guess allowed constant
# (under the while loop) use the user input letter variable (that was created in part 1), and assign the previous function name to it with the 2 parameters (correct letter guess and wrong letter guess)
# create an if function with the user input letter to check if it is in the snowman word variable
# create a print statement to show the letter was guess correctly
# use the correct letter guess variable and append it to the user input letter variable (this will add all the correct letter user has inputted into the empty list)
# (if it is not) create an else function and print the statement to show that the user input leter is not in the word and to try again
# (under the else statement) use the wrong letter guess variable and append it to the user input letter variable (this will add all the wrong letter user has inputted into the empty list)
# (outside of the while loop) call the draw snowman function to get the length of the wrong letter guess (this will how many wrong letters the user has inputted)
# print a statement telling the user what their wrong guess letters are and provide ther wrong letter guess list
# print a statement telling the user what their correct guess letters are and provide ther correct letter guess list
# print a statement telling the user what the secret word is

def snowman():
  r = RandomWord()
  snowman_word = r.word(
    word_min_length=SNOWMAN_MIN_WORD_LENGTH, 
    word_max_length=SNOWMAN_MAX_WORD_LENGTH)

  correct_letter_guess = []
  wrong_letter_guess = []

  while len(wrong_letter_guess) < WRONG_GUESS_ALLOWED:
    user_input_letter = get_letter_from_user(correct_letter_guess, wrong_letter_guess)

    if user_input_letter in snowman_word:
      print("You guessed a correct letter that's in the secret word. Keep going!\n")
      correct_letter_guess.append(user_input_letter)
    else:
      print(f"The letter {user_input_letter} is not in the secret word, try a different letter.\n")
      wrong_letter_guess.append(user_input_letter)
      
  draw_snowman(len(wrong_letter_guess))

  print(f"You've guessed the wrong letters: {wrong_letter_guess}")
  print(f"The letters you've guessed correctly: {correct_letter_guess}")
  print(f"The secret word is: {snowman_word}")


# define a draw snowman function with a wrong guess attempt parameter
# create a for loop with the iterated value is in range (the for loop is use in part 3 because there is a known amount of repetition involve, which is the number of wrong guess allowed)
# set the start of the range to be the wrong guess allowed variable + 1 minus the wrong guess attempt variable (this is so the previous drawing is not repeating itself and only continuing on from where the drawing last left off at)
# set end of the range to be the wrong guess allowed variable + 1 (the +1 is to make it inclusive of the last wrong guess allowed value)
# under the for loop, create an if statement where the iterated value is equal to 1 and create a print statement with the first part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the second part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the third part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the fourth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the fifth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the sixth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the seventh part of the snowman variable
# (if haven't done yet), call the draw snowman function with the wrong guess argument at the end of the else statement

def draw_snowman(wrong_guess_attempt):

  for i in range(WRONG_GUESS_ALLOWED + 1 - wrong_guess_attempt, WRONG_GUESS_ALLOWED + 1):
    if i == 1:
      print(SNOWMAN_1)
    elif i == 2:
      print(SNOWMAN_2)
    elif i == 3:
      print(SNOWMAN_3)    
    elif i == 4:
      print(SNOWMAN_4)   
    elif i == 5:
      print(SNOWMAN_5)
    elif i == 6:
      print(SNOWMAN_6)
    elif i == 7:
      print(SNOWMAN_7)


snowman()


Part 4F: Using Lists to Improve Readability and Simplify Code
Store the 7 snowman drawing in a list instead of making it all individual constants.

The first step is to store all of the drawing constants in a list:
SNOWMAN_GRAPHIC = [
    '*   *   *  ',
    ' *   _ *   ',
    '   _[_]_ * ',
    '  * (")    ',
    '  \( : )/ *',
    '* (_ : _)  ',
    '-----------'
]

The next step is to update the draw snowman function to use the list.
def print_snowman(wrong_guesses_count):
    for i in range(SNOWMAN_WRONG_GUESSES - wrong_guesses_count,
                SNOWMAN_WRONG_GUESSES)
        print(SNOWMAN_GRAPHIC[i])
        
        
# pseudocode:
# import random from wonderwords and import RandWord
# create a snowman minimum word length constant and assign as 5
# create a snowman maximum word length constant and assign as 8
# create another constant to allow the number of wrong guesses allowed for this string
# create another constant to store the snowman graphics into a list (each line of the drawing is separated by a comma)
# define a function name to get a letter from the user with the 2 parameters (correct letter guess and wrong letter guess)
# create a new variable to check the letter inputted in and set it as True (this will use to check later if the character inputted in fulfil the condition set up or not)
# set up a while loop with the check the letter inputted variable (the while loop will remain true until the attempt valid input variable is False)
# (under the while loop) create another variable to get the user input letter and assign the input function to it. Include the instructions telling the user what to
# create an if statement to check if the user input letter variable is in the correct letter guess parameter or if the user input letter variable is in the wrong letter guess parameter
# print a statement telling the user that this letter has already been guess and to try a different letter
# (if it is not) create an elif statement to check if the user input letter is an alpha (character) and the length of the user input letter is exactly 1
# set the check letter inputted variable to False (so the while loop will exit if the if statement fulfills both of the condition stated above)
# (if one of the 2 condition is false) create an else statement to print a statement telling the user to input in a single character only
# (outside of the while loop) return the user input letter so the function can output it

import random
from wonderwords import RandomWord

SNOWMAN_MIN_WORD_LENGTH = 5
SNOWMAN_MAX_WORD_LENGTH = 8
WRONG_GUESS_ALLOWED = len(SNOWMAN_GRAPHIC)

SNOWMAN_GRAPHICS = [
  '*   *   *  ',
  ' *   _ *   ',
  '   _[_]_ * ',
  '  * (")    ',
  '  \( : )/ *',
  '* (_ : _)  ',
  '-----------'
]


def get_letter_from_user(correct_letter_guess, wrong_letter_guess):
  check_letter_inputted = True

  while check_letter_inputted:
    user_input_letter = input("Please enter one letter: ")

    if user_input_letter in wrong_letter_guess or user_input_letter in correct_letter_guess:
      print("You have already guess this letter, please try another letter.\n")
    elif user_input_letter.isalpha() and len(user_input_letter) == 1:
      check_letter_inputted = False
    else:
      print("Invalid input, please enter one alphabetical character only.\n")

  return user_input_letter
  
  
# pseudocode:
# define a snowman function
# create a r (short for random) variable and assign the RandomWord function to it
# create a snowman word variable and assign the r.word module to start with the word min length variable as the snowman min word length constant, and stop with the word max length variable as the snowman max word length constant
# create a correct letter guess variable and assign an empty list to it (this will be use to store the wrong letters the user has inputted)
# create a wrong letter guess variable and assign an empty list to it (this will be use to store the wrong letters the user has inputted)
# set up a while loop with the length of the wrong letter guess variable and assign it as less than the wrong guess allowed constant
# (under the while loop) use the user input letter variable (that was created in part 1), and assign the previous function name to it with the 2 parameters (correct letter guess and wrong letter guess)
# create an if function with the user input letter to check if it is in the snowman word variable
# create a print statement to show the letter was guess correctly
# use the correct letter guess variable and append it to the user input letter variable (this will add all the correct letter user has inputted into the empty list)
# (if it is not) create an else function and print the statement to show that the user input leter is not in the word and to try again
# (under the else statement) use the wrong letter guess variable and append it to the user input letter variable (this will add all the wrong letter user has inputted into the empty list)
# (outside of the while loop) call the draw snowman function to get the length of the wrong letter guess (this will how many wrong letters the user has inputted)
# print a statement telling the user what their wrong guess letters are and provide ther wrong letter guess list
# print a statement telling the user what their correct guess letters are and provide ther correct letter guess list
# print a statement telling the user what the secret word is


def snowman():
  r = RandomWord()
  snowman_word = r.word(
    word_min_length=SNOWMAN_MIN_WORD_LENGTH, 
    word_max_length=SNOWMAN_MAX_WORD_LENGTH)
    
 
# pseucode:
# define a draw snowman function with a wrong guess attempt parameter
# create a for loop with the iterated value is in range (the for loop is use in part 3 because there is a known amount of repetition involve, which is the number of wrong guess allowed)
# set the start of the range to be the wrong guess allowed constant minus the wrong guess attempt variable (this is so the previous drawing is not repeating itself and only continuing on from where the drawing last left off at)
# set the end of the range to be the wrong guess allowed constant
# then create a print statement with the iterated value inside of the snowman graphics constant
# (if haven't done yet), call the draw snowman function with the wrong guess argument at the end of the else statement in Part 2
# at the end of your code, call the snowman function to run all 4 functions together


  correct_letter_guess = []
  wrong_letter_guess = []

  while len(wrong_letter_guess) < WRONG_GUESS_ALLOWED:
    user_input_letter = get_letter_from_user(correct_letter_guess, wrong_letter_guess)

    if user_input_letter in snowman_word:
      print("You guessed a correct letter that's in the secret word. Keep going!\n")
      correct_letter_guess.append(user_input_letter)
    else:
      print(f"The letter {user_input_letter} is not in the secret word, try a different letter.\n")
      wrong_letter_guess.append(user_input_letter)
      
  draw_snowman(len(wrong_letter_guess))

  print(f"You've guessed the wrong letter(s): {wrong_letter_guess}")
  print(f"The letter(s) you've guessed correctly: {correct_letter_guess}")
  print(f"The secret word is: {snowman_word}")
  
  
# pseucode:
# define a draw snowman function with a wrong guess attempt parameter
# create a for loop with the iterated value is in range (the for loop is use in part 3 because there is a known amount of repetition involve, which is the number of wrong guess allowed)
# set the start of the range to be the wrong guess allowed constant minus the wrong guess attempt variable (this is so the previous drawing is not repeating itself and only continuing on from where the drawing last left off at)
# set the end of the range to be the wrong guess allowed constant
# (under the for loop) create a print statement with the iterated value inside of the snowman graphics constant
# (if haven't done yet), call the draw snowman function with the wrong guess argument at the end of the else statement in Part 2
# at the end of your code, call the snowman function to run all 3 functions together


def draw_snowman(wrong_guess_attempt):

  for i in range(WRONG_GUESS_ALLOWED - wrong_guess_attempt, WRONG_GUESS_ALLOWED):
    print(SNOWMAN_GRAPHICS[i])


snowman()


# Part 5: Building a Word Dictionary

-Our end goal is to display each letter of the word with an underscore, or '_' character, if the letter has not yet been guessed and the show correct letter if it has been guessed.
-The first thing we need to do is convert the secret word snowman_word
 into a dictionary. Write a helper function build_word_dict
 that takes a string and returns a dictionary, where each unique letter from the word is a key and all of the values are False
-replace the correct_letter_guess with the snowman_dict

# pseudocode:
# import random
# from wonderwords import RandWord
# create a constant to store the snowman graphics into a list (each element of the list is a line drawing and each element is separated by a comma)
# create another constant for the number of wrong guesses allowed and set this as the length of the snowman graphic constant
# create a snowman minimum word length constant and assign as 5
# create a snowman maximum word length constant and assign as 8
# define a function name to get a letter from the user with the 2 parameters (correct letter guess and wrong letter guess)
# create a new variable to check the letter inputted in and set it as True (this will use to check later if the character inputted in fulfil the condition set up or not)
# set up a while loop with the check the letter inputted variable (the while loop will remain true until the variable is assign as False)
# (under the while loop) create another variable to get the user input letter and assign the input function to it. Print the statement telling the user to enter a letter
# create an elif statement to check if the user input letter is not an alpha (character) and the length of the user input letter is not equactly 1
# then create a print statement telling the user to input in a single character only
# (if it is) create an elif statement to check if the user input letter variable is in the correct letter guess parameter or if the user input letter variable is in the wrong letter guess parameter
# then print a statement telling the user that this letter has already been guess and to try a different letter
# create an else statement for the check letter inputted variable and assign it as False (so the while loop will exit if both of the condition stated above are true)
# (outside of the while loop) return the user input letter so the function can output it

import random
from wonderwords import RandomWord

SNOWMAN_GRAPHICS = [
  '*   *   *  ',
  ' *   _ *   ',
  '   _[_]_ * ',
  '  * (")    ',
  '  \( : )/ *',
  '* (_ : _)  ',
  '-----------'
]

WRONG_GUESS_ALLOWED = len(SNOWMAN_GRAPHIC)
SNOWMAN_MIN_WORD_LENGTH = 5
SNOWMAN_MAX_WORD_LENGTH = 8


def get_letter_from_user(correct_letter_guess, wrong_letter_guess):
  check_letter_inputted = True

  while check_letter_inputted:
    user_input_letter = input("Please enter one letter: ")

    if not user_input_letter.isalpha() or len(user_input_letter) != 1:
      print("Invalid input, please enter one alphabetical character only.\n")
    elif user_input_letter in correct_letter_guess or user_input_letter in wrong_letter_guess:
      print("You have already guess this letter, please try another letter.\n")
    else:
      check_letter_inputted = False
    
  return user_input_letter
  
  
# pseudocode for the helper function:
# define a function name for the build word dict with the word as its parameter
# create a word dict variable and assign it as an empty dict
# create a for loop with the iterated value (letter) in the word parameter
# (under the for loop) create an if statement to check if the letter is not in the word dict
# then the letter inside of the word dict is set as False
# (outside of the if statement) return the word dict for it to output


# HELPER FUNCTION
def build_word_dict(word):
  word_dict = {}
  for letter in word:
    if not letter in word_dict:
      word_dict[letter] = False
  return word_dict


# pseudocode:
# define a snowman function
# create a r variable (short for random) and assign the RandomWord function to it
# create a snowman word variable and assign the r.word module to start with the word min length variable as the snowman min word length constant, and stop with the word max length variable as the snowman max word length constant
# create a snowman dict variable and assign the previous build word dict function to it with the snowman word as its parameter (this will create a dict for all the correct letters that the user has inputted in)
# create a wrong letter guess variable and assign it as an empty list (this will be use to store the wrong letters as a list that the user has inputted in))
# set up a while loop with the length of the wrong letter guess variable and assign it as less than the wrong guess allowed constant
# (under the while loop) use the user input letter variable, and assign the previous get letter from user function to it with the 2 parameters (snowman dict and wrong letter guess)
# create an if statement with the user input letter to check if it is in the snowman dict variable
# then create a print statement to show the letter was guess correctly
# use the user input letter that is inside of the snowman dict variable and assign it as True (this will add to the empty dict if the was guess correctly)
# (if it is not) create an else statement and print the statement to show that the user input leter is not in the word and to try again
# then use the wrong letter guess variable and append it to the user input letter variable (this will add all the wrong letter user has inputted into the empty list)
# (outside of the while loop) call the draw snowman function to get the length of the wrong letter guess (this will how many wrong letters the user has inputted)
# (outside of the else statement) print a statement telling the user what their wrong guess letters are and provide ther wrong letter guess list
# call the draw snowman function with the length of the wrong letter guess as an argument
# print a statement telling the user what their correct guess letters are and provide ther correct letter guess in a dict
# print a statement telling the user what the secret word is


def snowman():
  r = RandomWord()
  snowman_word = r.word(
    word_min_length=SNOWMAN_MIN_WORD_LENGTH, 
    word_max_length=SNOWMAN_MAX_WORD_LENGTH)

  snowman_dict = build_word_dict(snowman_word)
  wrong_letter_guess = []

  while len(wrong_letter_guess) < WRONG_GUESS_ALLOWED:
    user_input_letter = get_letter_from_user(snowman_dict, wrong_letter_guess)

    if user_input_letter in snowman_dict:
      print("You guessed a correct letter that's in the secret word. Keep going!\n")
      snowman_dict[user_input_letter] = True
    else:
      print(f"The letter {user_input_letter} is not in the secret word, try a different letter.\n")
      wrong_letter_guess.append(user_input_letter)
      
    print(f"You've guessed the wrong letter(s): {wrong_letter_guess}\n")
   
   
  draw_snowman(len(wrong_letter_guess))
  print(f"The letter(s) you've guessed correctly: {snowman_dict}")
  print(f"The secret word is: {snowman_word}")


def draw_snowman(wrong_guess_attempt):

  for i in range(WRONG_GUESS_ALLOWED - wrong_guess_attempt, WRONG_GUESS_ALLOWED):
    print(SNOWMAN_GRAPHICS[i])


snowman()

Part 6: Displaying User Progres
Displaying User Progres

Update your get_letter_from_user helper function and make the following changes: 1. Change the first parameter to be the word dictionary instead of a list 1. Add additional feedback to the user when they attempt to guess a letter that they have already guessed that informs them if the letter is in the word or not.

# pseudocode:
# import random
# from wonderwords import RandWord
# create a constant to store the snowman graphics into a list (each element of the list is a line drawing and each element is separated by a comma)
# create another constant for the number of wrong guesses allowed and set this as the length of the snowman graphic constant
# create a snowman minimum word length constant and assign as 5
# create a snowman maximum word length constant and assign as 8
# define a function name to get a letter from the user with the 2 parameters (word dict and wrong letter guess)
# create a new variable to check the letter inputted in and set it as True (this will use to check later if the character inputted in fulfil the condition set up or not)
# set up a while loop with the check the letter inputted variable (the while loop will remain true until the variable is assign as False)
# (under the while loop) create another variable to get the user input letter and assign the input function to it. Print the statement telling the user to enter a letter
# create an elif statement to check if the user input letter is not an alpha (character) and the length of the user input letter is not equactly 1
# then create a print statement telling the user to input in a single character only
# (if it is) create an elif statement to check if the user input letter variable in the word dict and the user input letter inside of the word dict variable (has already been guessed) or if the user input letter variable in the wrong letter guess parameter (has already been guessed)
# then print a statement telling the user that this letter has already been guess and to try a different letter
# create an else statement for the check letter inputted variable and assign it as False (so the while loop will exit if both of the condition stated above are true)
# (outside of the while loop) return the user input letter so the function can output it


import random
from wonderwords import RandomWord

SNOWMAN_GRAPHICS = [
  '*   *   *  ',
  ' *   _ *   ',
  '   _[_]_ * ',
  '  * (")    ',
  '  \( : )/ *',
  '* (_ : _)  ',
  '-----------'
]

WRONG_GUESS_ALLOWED = len(SNOWMAN_GRAPHIC)
SNOWMAN_MIN_WORD_LENGTH = 5
SNOWMAN_MAX_WORD_LENGTH = 8


def get_letter_from_user(word_dict, wrong_letter_guess):
  check_letter_inputted = True

  while check_letter_inputted:
    user_input_letter = input("Please enter one letter: ")

    if not user_input_letter.isalpha() or len(user_input_letter) != 1:
      print("Invalid input, please enter one alphabetical character only.\n")
    elif (user_input_letter in word_dict and word_dict[user_input_letter] or user_input_letter in wrong_letter_guess:
      print("You have already guess this letter, please try another letter.\n")
    else:
      check_letter_inputted = False
    
  return user_input_letter


# pseudocode for the helper function:
# define a function name for the build word dict with the word as its parameter
# create a word dict variable and assign it as an empty dict
# create a for loop with the iterated value (letter) in the word parameter
# (under the for loop) create an if statement to check if the letter is not in the word dict
# then the letter inside of the word dict is set as False
# (outside of the if statement) return the word dict for it to output


# HELPER FUNCTION
def build_word_dict(word):
  word_dict = {}
  for letter in word:
    if not letter in word_dict:
      word_dict[letter] = False
  return word_dict


# pseudocode:
# define a snowman function
# create a r variable (short for random) and assign the RandomWord function to it
# create a snowman word variable and assign the r.word module to start with the word min length variable as the snowman min word length constant, and stop with the word max length variable as the snowman max word length constant
# create a snowman dict variable and assign the previous build word dict function to it with the snowman word as its parameter (this will create a dict for all the correct letters that the user has inputted in)
# create a wrong letter guess variable and assign it as an empty list (this will be use to store the wrong letters as a list that the user has inputted in))
# set up a while loop with the length of the wrong letter guess variable and assign it as less than the wrong guess allowed constant
# (under the while loop) use the user input letter variable, and assign the previous get letter from user function to it with the 2 parameters (snowman dict and wrong letter guess)
# create an if statement with the user input letter to check if it is in the snowman dict variable
# then create a print statement to show the letter was guess correctly
# use the user input letter that is inside of the snowman dict variable and assign it as True (this will add to the empty dict if the was guess correctly)
# (if it is not) create an else statement and print the statement to show that the user input leter is not in the word and to try again
# then use the wrong letter guess variable and append it to the user input letter variable (this will add all the wrong letter user has inputted into the empty list)
# (outside of the while loop) call the draw snowman function to get the length of the wrong letter guess (this will how many wrong letters the user has inputted)
# (outside of the else statement) print a statement telling the user what their wrong guess letters are and provide ther wrong letter guess list
# call the draw snowman function with the length of the wrong letter guess as an argument
# print a statement telling the user what their correct guess letters are and provide ther correct letter guess in a dict
# print a statement telling the user what the secret word is


def snowman():
  r = RandomWord()
  snowman_word = r.word(
    word_min_length=SNOWMAN_MIN_WORD_LENGTH, 
    word_max_length=SNOWMAN_MAX_WORD_LENGTH)

  snowman_dict = build_word_dict(snowman_word)
  wrong_letter_guess = []

  while len(wrong_letter_guess) < WRONG_GUESS_ALLOWED:
    user_input_letter = get_letter_from_user(snowman_dict, wrong_letter_guess)

    if user_input_letter in snowman_dict:
      print("You guessed a correct letter that's in the secret word. Keep going!") # THIS PART IS NOT OUTPUTTIN CORRECTLY!!
      snowman_dict[user_input_letter] = True
    else:
      print(f"The letter {user_input_letter} is not in the secret word, try a different letter.\n")
      wrong_letter_guess.append(user_input_letter)
      
    print(f"The letters you've guessed incorrectly: {wrong_letter_guess}\n")

  draw_snowman(len(wrong_letter_guess))
  print(f"The letter(s) you've guessed correctly: {snowman_dict}")
  print(f"The secret word is: {snowman_word}")
  
  
# pseucode:
# define a draw snowman function with a wrong guess attempt parameter
# create a for loop with the iterated value is in range (the for loop is use in part 3 because there is a known amount of repetition involve, which is the number of wrong guess allowed)
# set the start of the range to be the wrong guess allowed constant minus the wrong guess attempt variable (this is so the previous drawing is not repeating itself and only continuing on from where the drawing last left off at)
# set the end of the range to be the wrong guess allowed constant
# then create a print statement with the iterated value inside of the snowman graphics constant
# (if haven't done yet), call the draw snowman function with the wrong guess argument at the end of the else statement in Part 2
# at the end of your code, call the snowman function to run all 4 functions together


def draw_snowman(wrong_guess_attempt):

  for i in range(WRONG_GUESS_ALLOWED - wrong_guess_attempt, WRONG_GUESS_ALLOWED):
    print(SNOWMAN_GRAPHICS[i])


snowman()


Part 7: Getting Word Guessing Progress

- Snowman Game Description:
    1. User starts the game from the command line
    2. A secret word is selected
    3. User is prompted to guess a letter
    4. The game checks the letter to see if it is in the word
    5. The game prints out a section of the snowman drawing, showing one level for each incorrectly guessed letters
    6. The game prints out a hidden version of the word, where each correct letter is displayed and un-guessed letters are hidden as underscores
    7. The game prints out all of the incorrect letters that have been guessed
    8. The game loops back to asking the user to guess a letter and continues that pattern until either the user has guessed all of the letters in the word, or the snowman drawing is complete.


# pseudocode for setup and constants:
# import random
# from wonderwords import RandWord module
# create a constant to store the snowman graphics into a list (each element of the list is a line drawing of the graphic and each element is separated by a comma)
# create another constant for the number of wrong guesses allowed and set this as the length of the snowman graphics constant
# create a snowman minimum word length constant and assign as 5
# create a snowman maximum word length constant and assign as 8

import random
from wonderwords import RandomWord

SNOWMAN_GRAPHICS = [
  '*   *   *  ',
  ' *   _ *   ',
  '   _[_]_ * ',
  '  * (")    ',
  '  \( : )/ *',
  '* (_ : _)  ',
  '-----------'
]

WRONG_GUESS_ALLOWED = len(SNOWMAN_GRAPHICS)
SNOWMAN_MIN_WORD_LENGTH = 5
SNOWMAN_MAX_WORD_LENGTH = 8


# pseudocode:
# define a function name to get a letter from the user with the 2 parameters (word dict and wrong letter guess list)
# create a check user input variable and set it as True (this will use to check later if the letter inputted in fulfil the conditions set up or not)
# create a while loop with the check user input variable (the while loop will remain true until the variable is assign as False)
# then create another variable to get the user input and assign the input function to it. Print a statement telling the user to enter a letter
# create an if statement to check if the user input is not an alpha (letter) or the length of the user input is not exacly 1
# then create a print statement telling the user to input in a single letter only
# (if it is) create an elif statement to check that the user input variable in the correct letter guess dict and the user input variable is part of the correct letter guess dict variable or if the user input variable is in the wrong letter guess list parameter (this means that the letter has already been guessed before))
# then print a statement telling the user that the letter has already been guess and to try a different letter
# create an else statement for the check user input variable and assign it as False (so the while loop will exit if both of the condition stated above are true)
# (outside of the while loop) return the user input letter so the function can show it

def get_letter_from_user(correct_letter_guess_dict, wrong_letter_guess_list):
  check_user_input = True

  while check_user_input:
    user_input = input("\nPlease enter one letter: ")

    if not user_input.isalpha() or len(user_input) != 1:
      print("Invalid input, please enter one alphabetical letter only.")
    elif (user_input in correct_letter_guess_dict and correct_letter_guess_dict[user_input]) or user_input in wrong_letter_guess_list:
      print("You have already guess this letter, please try another letter.")
    else:
      check_user_input = False
    
  return user_input


# pseudocode for helper function 1:
# define a function name for the build correct letter guess dict with the word as its parameter
# create a correct letter guess dict variable and assign it as an empty dict (all the correct letters the user has input will show up in here)
# create a for loop with the iterated value (letter) in the word parameter
# then use the iterated value (letter) that is part of the correct letter guess dict and set it as False
# (outside of the for loop) return the correct letter guess dict for it to output

# Helper Function 1
def build_correct_letter_guess_dict(guess_word):
  correct_letter_guess_dict = {}
  for letter in guess_word:
      correct_letter_guess_dict[letter] = False
  return correct_letter_guess_dict


# pseudocode for helper function 2:
# define the guess word progress function with 2 parameters (the guess word and the correct letter guess dict)
# create a for loop to check for each of iterated value (letter) in the guess word
# then create an if statement to check if (any of) the letter is not part of the correct letter guess dict variable
# then return False
# (outside of the for loop) return True

# helper function 2 
def guess_word_progress(guess_word, correct_letter_guess_dict):

  for letter in guess_word:
    if not correct_letter_guess_dict[letter]:
      return False

  return True


# pseudocode for helper function 3:
# define a show guess word progress function with 2 parameters (the guess word and the correct letter guess dict)
# create an output progress string variable and set it as an empty string (if the letter is in the word, it will print that letter to the output progress string, if not, it will print an underscore instead to the output progress string)
# create a for loop to check for each of iterated value (letter) in the guess word
# then create an if statement to check if iterated value (letter) is part of the correct letter guess dict parameter
# (if it is) the output progress string variable will be incremented by itself and with the (iterated value) letter (this is to print all the letters that user input correctly to the output progress string)
# (if it is not) create an else statement and use the output progress string variable to incremented by itself with the underscore string (this will show all the letters that have the user have not correctly inputted in yet with an _ symbol)
# (outside of the else statement) use the output progress string variable and increment by itself with a blank space string (this is to separate what the user has inputted in correctly vs what the user has not inputted in yet from each other with a space in between it to better visualize it)
# (outside of the for loop) print the output progress string variable to show what the user's progress has been so far

# helper function 3
def show_guess_word_progress(guess_word, correct_letter_guess_dict):
  output_progress_string = ""

  for letter in guess_word:
    if correct_letter_guess_dict[letter]:
      output_progress_string += letter
    else:
      output_progress_string += "_"
    output_progress_string+= " "
  print(output_progress_string)


# pseudocode:
# define a snowman function
# create a generate random word variable and assign the RandomWord module to it
# create a snowman word variable and assign the generate random word variable to the word module 
# it will start with the word min length variable as the snowman min word length constant, and stop with the word max length variable as the snowman max word length constant
# create a snowman dict variable and assign the build correct letter guess dict function to it (this is the helper function 1 previously created) with the snowman word as its parameter (this will create a dict for all the correct letters that the user has inputted in)
# create a wrong letter guess variable and assign it as an empty list (this will be use to store all the wrong letters as a list that the user has input))
# create an all guess letters variable and set it as False (this will be use to show later all the incorrect letters the user has guessed)
# call the guess word progress function (from helper function 2) with its two parameters (the snowman word and the snowman dict)
# create a while loop with the length of the wrong letter guess list variable and assign it to be less than the wrong guess allowed constant and not all guessed letters variable
# (under the while loop) use the user input variable, and assign the previous get letter from user function to it (this is from part 1) with the 2 parameters (snowman dict and wrong letter guess list)
# create an if statement with the user input variable to check if it is in the snowman dict variable
# then create a print statement to show the letter was guess correctly
# use the user input variaable that is part of the snowman dict variable and assign it as True (this will add to the empty dict if the letter was guess correctly)
# (if it is not) create an else statement and print the statement to show that the user input variable is not in the word and to try again
# use the wrong letter guess list variable and append it (add it to the end) to the user input variable (this will add all the wrong letters the user has inputted into the empty list)
# (outside of the else statement) use the all guessed letters variable and set it to be the guess word progress function (helper fuction 2) with its 2 parameters (the snowman word and the snowman dict) (this variable will be use later to check if all of the letters were guess correctly or not to determine the outcome of the game)
# print a statement telling the user they have guessed these letters correctly
# call the show guess word progress function (from helper function 3) with its two parameters (the snowman word and the snowman dict) (this will show the letters that are correctly guess in the output progress string variable and will show the _ symbol if the letter has not been guessed yet in the output progress string variable)
# print a statement telling the user what their wrong guess letters are and use the + sign (to join together the previous incorrect letter inputted in with the current incorrect letter inputted in) to join the wrong letter guess list variable (this provides an ongoing list of all the wrong letters the user has incorrectly inputted in)
# call the draw snowman graphic function with the length of the wrong letter guess list (this will show the next element of the graphic line for each wrong letter the user has inputted in)
# (outside of the while loop) use an if statement to check if all of the guess letters (are correctly inputted in)
# (if so) print a statement telling the user that they have won the game and what the secret word was
# (if not) create an else statement telling the user that they have lost and whatt the secret word was

def snowman():
  generate_random_word = RandomWord()
  snowman_word = generate_random_word.word(
    word_min_length=SNOWMAN_MIN_WORD_LENGTH, 
    word_max_length=SNOWMAN_MAX_WORD_LENGTH)

  snowman_dict = build_correct_letter_guess_dict(snowman_word)
  wrong_letter_guess_list = []
  all_guessed_letters = False

  guess_word_progress(snowman_word, snowman_dict)

  while len(wrong_letter_guess_list) < WRONG_GUESS_ALLOWED and not all_guessed_letters:
    user_input = get_letter_from_user(snowman_dict, wrong_letter_guess_list)

    if user_input in snowman_dict:
      print("You guessed a correct letter that's in the secret word. Keep going!")
      snowman_dict[user_input] = True
    else:
      print(f"The letter {user_input} is not in the secret word, try a different letter.")
      wrong_letter_guess_list.append(user_input)

    all_guessed_letters = guess_word_progress(snowman_word, snowman_dict)
    print("\nThe letters you've guessed correctly:")
    show_guess_word_progress(snowman_word, snowman_dict)
    print("\nThe letters you've guessed incorrectly: " + " ".join(wrong_letter_guess_list))
    draw_snowman_graphic(len(wrong_letter_guess_list))

  if all_guessed_letters:
    print(f"CONGRATULATIONS, You have won the game! You were able to guessed the secret word! \nThe secret word was: {SNOWMAN_WORD}")
  else:
    print(f"GAME OVER, You have lost! You were not able to guessed the secret word. \nThe secret word was: {SNOWMAN_WORD}")


# pseudocode:
# define a draw snowman graphic function with a wrong guess attempt parameter
# create a for loop with the iterated value (number of user input) is in range (the for loop is use in part 3 because there is a known amount of repetition involve, which is the number of wrong guess allowed)
# set the start of the range to be the wrong guess allowed constant minus the wrong guess attempt parameter (this is so the previous drawing is not repeating itself and only continuing on from where the drawing last left off at)
# set the end of the range to be the wrong guess allowed constant (so that it will draw all the way to the end once max number of user input is reached)
# then create a print statement with the iterated value (num user input) is part of the snowman graphics constant
# (if haven't done yet), near the end of Part 2 inside the snowman function, call the draw snowman graphic function with the length of the the wrong letter guess list (as the argument) (this is to add an element of the snowman graphics each time the letter was guessed incorrectly)
# at the very end of your code, call the snowman function to run all the functions together
