# Part 1
Directions:
1. The user is presented with a list of underscores "_". Each Underscore represents one letter in a word.
2. The user guesses letters for the hidden word
    - For each correct guess, a letter will be replace the corresponding underscore.
    - For every wrong guess we are going to remember the number of wrong guesses and print out more and more of a snowman drawing.
3. When the snowman is finished and the user is out of guesses, they lose the game.
4. Use the constant SNOWMAN_WORD

Tips:
1. First, we will need to use `input` to get a string from the user and store it in a variable.
2. Second, we need to check to see if the input is valid.
    - In `get_number_from_user`, we used `isnumeric()` to ensure that the input was a number. In this function, we need to check to see if the input is a letter, and if the input contains only one letter.
        - `letter_from_user.isalpha()` will return `True` if the string variable `letter_from_user` contains only alphabetical characters
        - `len(letter_from_user)` will tell us the length of the string
3. Lastly, we need to return the input string
    - If the user gives bad input:
        - We print "Invalid letter please enter a single character."
        - Then return the input.
    - If the user gives valid input:
        - Then we just return the input.
        
      
SNOWMAN_WORD = "snowman"

def get_letter_from_user():
  user_input_letter = input("Please enter a letter: ") # allows the user to choose a letter

  if user_input_letter.isalpha() and len(user_input_letter) == 1: # checks if inputted value is a letter and is only 1 letter
    return user_input_letter
  else:
    print("Invalid letter, please enter a single character.")

def snowman():
  user_input_letter = get_letter_from_user() # use the previous function's as an assigned value
  if user_input_letter in SNOWMAN_WORD:
    print("Letter found")
    return True
  else:
    print("Letter not found")
    return False

snowman()


# Part 2
Directions:
Create another function call snowman. Check if the letter is in the word or not. To do that, we're going to use the python keyword `in`. The syntax for `in` is `thing1 in thing2`. This expression evaluates to `True` if `thing2` contains `thing1`, and false otherwise. We can use it in a conditional expression as `if thing1 in thing2:`.
1. First, use `get_letter_from_user` to get a letter
2. Check if the letter is in `SNOWMAN_WORD`
    - print "Letter found" if the letter is in `SNOWMAN_WORD`.
    - print "Letter not found" if it's not in `SNOWMAN_WORD`.
3. If the letter is in `SNOWMAN_WORD` return `True` otherwise return `False` if it's not in `SNOWMAN_WORD`.


SNOWMAN_WORD = "snowman"

def get_letter_from_user():
  user_input_letter = input("Please enter a letter: ") # allows the user to choose a letter

  if user_input_letter.isalpha() and len(user_input_letter) == 1: # checks if inputted value is a letter and is only 1 letter
    return user_input_letter
  else:
    print("Invalid letter, please enter a single character.")

def snowman():
  user_input_letter = get_letter_from_user() # use the previous function's as an assigned value
  if user_input_letter in SNOWMAN_WORD:
    print("Letter found")
    return True
  else:
    print("Letter not found")
    return False

snowman()


# Part 3A
Add a while loop to the function get_letter_from_user.

SNOWMAN_WORD = "snowman"

def get_letter_from_user():
  attempt_valid_input = True
  user_input_letter = None

  while attempt_valid_input:
    user_input_letter = input("Please enter a letter: ") # allows the user to choose a letter

    if user_input_letter.isalpha() and len(user_input_letter) == 1: # checks if inputted value is a letter and is only 1 letter
      return user_input_letter
    else:
      print("Invalid letter, please enter a single alphabetical character only.")

get_letter_from_user()


# Part 3B
- Add a loop to the function snowman.
- Add two counters:  correct_guess and wrong_guess.
- Adjust the loop to allow the user to continue to guess until they reach the SNOWMAN_WRONG_GUESS constant. If the number of correct_guess is equal to the length of SNOWMAN_WORD, then the word has been guessed correctly and the user should no longer be able to submit anymore guesses.
- Use the helper function get_letter_from_user to get user input in the loop.
- Track the number of correct and incorrect guesses, adding one to the proper counter when the user makes a guess.
- When finish, print out, “You made X correct and Y incorrect guesses”, where X and Y are the number of correct and incorrect guesses.

SNOWMAN_WORD = "snowman"

def get_letter_from_user():
  attempt_valid_input = True
  user_input_letter = None

  while attempt_valid_input:
    user_input_letter = input("Please enter a letter: ") # allows the user to choose a letter

    if user_input_letter.isalpha() and len(user_input_letter) == 1: # checks if inputted value is a letter and is only 1 letter
      attempt_valid_input = False

      return user_input_letter
    else:
      print("Invalid input, please enter a single alphabetical character only.")


SNOWMAN_WRONG_GUESS_ALLOWED = 7

def snowman():
  continue_guess_letter = True
  correct_guess = 0
  wrong_guess = 0

  while wrong_guess < SNOWMAN_WRONG_GUESS_ALLOWED and correct_guess < len(SNOWMAN_WORD):
    user_input_letter = get_letter_from_user() # use the previous function's as an assigned value

    if str(user_input_letter) in SNOWMAN_WORD:
      correct_guess += 1
    else:
      wrong_guess += 1
      
  print(f"You made {correct_guess} correct guess and {wrong_guess} wrong guess attempts.")  

snowman()


# Part 3C
- Define another function to draw the snowman. Add these ASCII snowman drawing constants to the top of the code file. For each wrong guess, we will want to add a new element to the drawing. The goal is to have a helper function that is use to pass the wrong_guess count value to it and it will draw the appropriate amount of the snowman. (For example, if the WRONG_GUESS_ALLOWED reaches 7, then the SNOWMAN_7 drawing will be printed.
- Now we're going to add a for loop inside this function to make it draw not just one element of the snowman, but all of the elements
  (use for loop since we know exactly how many times the loop needs to repeat (which is the the number of times the WRONG_GUESS_ALLOWED is assigned to)
- The next step is to modify the range of our for loop to only print the elements that we want. For Snowman, we want to draw our snowman from the ground up, so if we have only 1 incorrect guess, we want to print the last element, 2 incorrect guesses means the last two elements, and so on. Our function should take in the number of incorrect guesses and use that value in the range to draw the elements of the snowman in the order that we want.
- Finally, inside of the `snowman`function, add the `print_snowman`function call to the game loop to print out the current state of the snowman to the user after each guess.

# The ASCII snowman drawing:
SNOWMAN_1 = '*   *   *  '
SNOWMAN_2 = ' *   _ *   '
SNOWMAN_3 = '   _[_]_ * '
SNOWMAN_4 = '  * (")    '
SNOWMAN_5 = '  \( : )/ *'
SNOWMAN_6 = '* (_ : _)  '
SNOWMAN_7 = '-----------'


# pseucode for Part 3C:
# define a draw snowman function with a wrong guess attempt parameter
# create a for loop with the iterated value is in range (the for loop is use in part 3 because there is a known amount of repetition involve, which is the number of wrong guess allowed)
# set the start of the range to be the wrong guess allowed variable + 1 minus the wrong guess attempt variable (this is so the previous drawing is not repeating itself and only continuing on from where the drawing last left off at)
# set end of the range to be the wrong guess allowed variable + 1 (the +1 is to make it inclusive of the last wrong guess allowed value)
# under the for loop, create an if statement where the iterated value is equal to 1 and create a print statement with the first part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the second part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the third part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the fourth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the fifth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the sixth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the seventh part of the snowman variable
# (if haven't done yet), call the draw snowman function with the wrong guess argument at the end of the else statement in Part 2
# at the end of your code, call the snowman function to run all 3 functions together

# pseudocode for Part 3A:
# create a snowman word variable and assign a string to it (the user will try to guess this word)
# create another variable to allow the number of wrong guesses allowed for this string
# create your drawing and and assign it to each new variable
# define a function name to get a letter from the user
# create a new variable to check the letter inputted in and set it as True (this will use to check later if the character inputted in fulfil the condition set up or not)
# set up a while loop to check the leter inputted in (the while loop will remain true until the attempt valid input variable is False)
# within the while loop action block, create another variable to get the user input letter and assign the input function to it. Include the instructions telling the user what to
# create an if statement (inside the while loop) to check if the user input letter is an alpha and the length of the user input letter is equal to 1
# (if this true), set the check letter inputted variable to False (so the while loop will exit if the if statement fulfills both the condition)
# return the user input letter so the function can output it
# (if one of the 2 condition is false) create an else statement to print a statement telling the user how to fulfill both of the conditions 


# PART 3A
SNOWMAN_WORD = "snowman"
WRONG_GUESS_ALLOWED = 7

SNOWMAN_1 = '*   *   *  '
SNOWMAN_2 = ' *   _ *   '
SNOWMAN_3 = '   _[_]_ * '
SNOWMAN_4 = '  * (")    '
SNOWMAN_5 = '  \( : )/ *'
SNOWMAN_6 = '* (_ : _)  '
SNOWMAN_7 = '-----------'


def get_letter_from_user():
  check_letter_inputted = True

  while check_letter_inputted:
    user_input_letter = input("Please enter one letter: ")

    if user_input_letter.isalpha() and len(user_input_letter) == 1:
      check_letter_inputted = False

      return user_input_letter
    else:
      print("Invalid input, please enter a single alphabetical character only.")


# pseudocode for Part 3B:
# define a snowman function
# create a correct guess variable and assign it to start the count at 0
# create a wrong guess variable and assign it to start the count at 0
# set up a while loop and set the condition where the wrong guess variable is less than the wrong guess allowed constant
# within the while loop action block, use the user input letter variable (that was created in part 1), and assign the previous function name to it
# create an if statement with the user input letter to check if it is in the snowman word constant
# (if it is) create a print statement to show the letter was guess correctly
# to increment the number of correct guess, asssign the correct guess variable to itself and increment it by 1
# (if it is not) create an else statement and print the statement to show that the user input leter is not in the word
# to increment the number of wrong guess, assign the wrong guess variable to itself and increment it by 1
# call the draw snowman function with the wrong guess as an argument (this function will be created later in Part 3) (the step is to output each of the snowman drawing for every wrong guess)
# print a statement telling the user what the final correct guess and wrong guess counts are (this step is outside of the while loop)


# PART 3B
def snowman():
  correct_guess = 0
  wrong_guess = 0

  while wrong_guess < WRONG_GUESS_ALLOWED:
    user_input_letter = get_letter_from_user()

    if user_input_letter in SNOWMAN_WORD:
      print("You guessed a correct letter that's in the word. Keep going!\n")
      correct_guess += 1
    else:
      print(f"The letter {user_input_letter} is not in the word. Try a different letter!\n")
      wrong_guess += 1
    draw_snowman(wrong_guess)
      
  print(f"Game Over!\nYou made {correct_guess} correct guess and {wrong_guess} wrong guess attempts.")  


# pseucode for Part 3C:
# define a draw snowman function with a wrong guess attempt parameter
# create a for loop with the iterated value is in range (the for loop is use in part 3 because there is a known amount of repetition involve, which is the number of wrong guess allowed)
# set the start of the range to be the wrong guess allowed variable + 1 minus the wrong guess attempt variable (this is so the previous drawing is not repeating itself and only continuing on from where the drawing last left off at)
# set end of the range to be the wrong guess allowed variable + 1 (the +1 is to make it inclusive of the last wrong guess allowed value)
# under the for loop, create an if statement where the iterated value is equal to 1 and create a print statement with the first part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the second part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the third part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the fourth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the fifth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the sixth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the seventh part of the snowman variable
# (if haven't done yet), call the draw snowman function with the wrong guess argument at the end of the else statement in Part 2
# at the end of your code, call the snowman function to run all 3 functions together


# PART 3C
def draw_snowman(wrong_guess_attempt):

  for i in range(WRONG_GUESS_ALLOWED + 1 - wrong_guess_attempt, WRONG_GUESS_ALLOWED + 1):
    if i == 1:
      print(SNOWMAN_1)
    elif i == 2:
      print(SNOWMAN_2)
    elif i == 3:
      print(SNOWMAN_3)    
    elif i == 4:
      print(SNOWMAN_4)   
    elif i == 5:
      print(SNOWMAN_5)
    elif i == 6:
      print(SNOWMAN_6)
    elif i == 7:
      print(SNOWMAN_7)


snowman()


# PART 4A:
1. Before we can use it in our code, we will need to install the package using the command line. To install, copy pasta this into your terminal:
2. Once that's done, add the line `from wonderwords import RandomWord` to the top of our file.
    
    -This will import the class `RandomWord` for us to use in our code.
    
3. Next, add the constants `SNOWMAN_MAX_WORD_LENGTH = 8` and `SNOWMAN_MIN_WORD_LENGTH = 5` with the other constants at the top of the file.
4. Then, add the following lines of code to the top of the `snowman`
 function:

 r = RandomWord()
    snowman_word = r.word(
      word_min_length=SNOWMAN_MIN_WORD_LENGTH,
      word_max_length=SNOWMAN_MAX_WORD_LENGTH)
      
 5. The last piece of adding our new random word is replacing the constant SNOWMAN_WORD
 in the conditional test inside of the snowman
 function with the new snowman_word
 variable.
 
# Part 4 codes only:
import random
from wonderwords import RandomWord

SNOWMAN_MIN_WORD_LENGTH = 5
SNOWMAN_MAX_WORD_LENGTH = 8

def snowman():
  r = RandomWord()
  snowman_word = r.word(
    word_min_length=SNOWMAN_MIN_WORD_LENGTH, 
    word_max_length=SNOWMAN_MAX_WORD_LENGTH)

  correct_guess = 0
  wrong_guess = 0

  while wrong_guess < WRONG_GUESS_ALLOWED:
    user_input_letter = get_letter_from_user()

    if user_input_letter in snowman_word:
      print("You guessed a correct letter that's in the word. Keep going!\n")
      correct_guess += 1
    else:
      print(f"The letter {user_input_letter} is not in the word. Try a different letter!\n")
      wrong_guess += 1
    draw_snowman(wrong_guess)
      
  print(f"Game Over!\nYou made {correct_guess} correct guess and {wrong_guess} wrong guess attempts.")
  
  
 Part 4B: Tracking User Input
- To track incorrect guesses, use a list to find a way to store as many or as little wrong guesses as it needs to, and will allow the codes to be more flexible and easier to modify.
    1. Start by addding an incorrect guesses list variable to the top of the `snowman` function:.
    2. Next we need to add each incorrect guess to the list. We are going to do this with the list function `append`which adds elements to the end of the list.
    3. In the previous version, we were incrementing a variable `wrong_guesses`
     each time the user guessed a letter that was not in the word, and then using that variable in the test for our while loop. We can continue to use this variable, but we can use our list instead and simplify our code. The number of elements in `wrong_letter_guess` is the number of incorrect guesses, so we can use the length of the list instead of the counter variable. We get the length of the list by using the len() function. We can also use the length of the list when we call the print_snowman function.


Updated codes:
# pseudocode:
# import random from wonderwords and import RandWord
# create a snowman minimum word length constant and assign as 5
# create a snowman maximum word length constant and assign as 8
# create another constant to allow the number of wrong guesses allowed for this string
# create your drawing and and assign it to each new variable
# define a function name to get a letter from the user
# create a new variable to check the letter inputted in and set it as True (this will use to check later if the character inputted in fulfil the condition set up or not)
# set up a while loop to check the leter inputted in (the while loop will remain true until the attempt valid input variable is False)
# within the while loop action block, create another variable to get the user input letter and assign the input function to it. Include the instructions telling the user what to
# create an if statement (inside the while loop) to check if the user input letter is an alpha and the length of the user input letter is equal to 1
# (if this true), set the check letter inputted variable to False (so the while loop will exit if the if statement fulfills both the condition)
# return the user input letter so the function can output it
# (if one of the 2 condition is false) create an else statement to print a statement telling the user how to fulfill both of the conditions 

import random
from wonderwords import RandomWord

SNOWMAN_MIN_WORD_LENGTH = 5
SNOWMAN_MAX_WORD_LENGTH = 8
WRONG_GUESS_ALLOWED = 7

SNOWMAN_1 = '*   *   *  '
SNOWMAN_2 = ' *   _ *   '
SNOWMAN_3 = '   _[_]_ * '
SNOWMAN_4 = '  * (")    '
SNOWMAN_5 = '  \( : )/ *'
SNOWMAN_6 = '* (_ : _)  '
SNOWMAN_7 = '-----------'


def get_letter_from_user():
  check_letter_inputted = True

  while check_letter_inputted:
    user_input_letter = input("Please enter one letter: ")

    if user_input_letter.isalpha() and len(user_input_letter) == 1:
      check_letter_inputted = False
      return user_input_letter
    else:
      print("Invalid input, please enter a single alphabetical character only.")
      
      
# pseudocode:
# define a snowman function
# create a r (short for random) variable and assign the RandomWord function to it
# create a snowman word variable and assign the r.word module to start with the word min length variable as the snowman min word length constant, and stop with the word max length variable as the snowman max word length constant
# create a wrong letter guess variable and assign an empty list to it (this will be use to store the wrong letters the user has inputted)
# set up a while loop with the length of the wrong letter guess variable and assign it as less than the wrong guess allowed constant
# (under the while loop), use the user input letter variable (that was created in part 1), and assign the previous function name to it
# create an if statement with the user input letter to check if it is in the snowman word variable
# (if it is) create a print statement to show the letter was guess correctly
# (if it is not) create an else statement and print the statement to show that the user input leter is not in the word
# (under the else statement) use the wrong letter guess variable and append it to the user input letter variable (this will add all the wrong letter user has inputted to the empty list)
# (outside of the while loop) call the draw snowman function to get the length of the wrong letter guess (this will how many wrong letters the user has inputted)
# print a statement telling the user what the final correct guess and wrong guess counts are (this step is outside of the while loop)     

def snowman():
  r = RandomWord()
  snowman_word = r.word(
    word_min_length=SNOWMAN_MIN_WORD_LENGTH, 
    word_max_length=SNOWMAN_MAX_WORD_LENGTH)

  wrong_letter_guess = []
  
  
UPDATED CODES:
# pseudocode:
# import random from wonderwords and import RandWord
# create a snowman minimum word length constant and assign as 5
# create a snowman maximum word length constant and assign as 8
# create another constant to allow the number of wrong guesses allowed for this string
# create your drawing and and assign it to each new variable
# define a function name to get a letter from the user with the wrong letter guess as a parameter
# create a new variable to check the letter inputted in and set it as True (this will use to check later if the character inputted in fulfil the condition set up or not)
# set up a while loop with the check the letter inputted variable (the while loop will remain true until the attempt valid input variable is False)
# (under the while loop) create another variable to get the user input letter and assign the input function to it. Include the instructions telling the user what to
# create an if statement to check if the user input letter variable is in the wrong letter guess parameter
# print a statement telling the user that this letter has already been guess and to try a different letter
# (if it is not) create an elif statement to check if the user input letter is an alpha (character) and the length of the user input letter is exactly 1
# set the check letter inputted variable to False (so the while loop will exit if the if statement fulfills both of the condition stated above)
# (if one of the 2 condition is false) create an else statement to print a statement telling the user to input in a single character only
# (outside of the while loop) return the user input letter so the function can output it
  
  
# pseucodes 
# define a draw snowman function with a wrong guess attempt parameter
# create a for loop with the iterated value is in range (the for loop is use in part 3 because there is a known amount of repetition involve, which is the number of wrong guess allowed)
# set the start of the range to be the wrong guess allowed variable + 1 minus the wrong guess attempt variable (this is so the previous drawing is not repeating itself and only continuing on from where the drawing last left off at)
# set end of the range to be the wrong guess allowed variable + 1 (the +1 is to make it inclusive of the last wrong guess allowed value)
# under the for loop, create an if statement where the iterated value is equal to 1 and create a print statement with the first part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the second part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the third part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the fourth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the fifth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the sixth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the seventh part of the snowman variable
# (if haven't done yet), call the draw snowman function with the wrong guess argument at the end of the else statement in Part 2
# at the end of your code, call the snowman function to run all 3 functions together


  while len(wrong_letter_guess) < WRONG_GUESS_ALLOWED:
    user_input_letter = get_letter_from_user()

    if user_input_letter in snowman_word:
      print("You guessed a correct letter that's in the word. Keep going!\n")
    else:
      print(f"The letter {user_input_letter} is not in the word. Try a different letter!\n")
      wrong_letter_guess.append(user_input_letter)
      
  draw_snowm(len(wrong_letter_guess))
  print(wrong_letter_guess)


def draw_snowman(wrong_guess_attempt):

  for i in range(WRONG_GUESS_ALLOWED + 1 - wrong_guess_attempt, WRONG_GUESS_ALLOWED + 1):
    if i == 1:
      print(SNOWMAN_1)
    elif i == 2:
      print(SNOWMAN_2)
    elif i == 3:
      print(SNOWMAN_3)    
    elif i == 4:
      print(SNOWMAN_4)   
    elif i == 5:
      print(SNOWMAN_5)
    elif i == 6:
      print(SNOWMAN_6)
    elif i == 7:
      print(SNOWMAN_7)


snowman()


Part 4C: Using `wrong_letter guess` in `get_letter_from_user`

- Now that we have a list incorrect guesses, we can use them in the helper function `get_letter_from_user` to prevent our user from inputting the same incorrect letter multiple times.
    1. The first step is to pass the variable `wrong_letter guess` to `get_letter_from_user` as an argument.
    2. Next, We will need to update our function definition of `get_letter_from_user` with a new parameter.
    3. Last, we need to use the new information inside of `get_letter_from_user`.
        - Python lists provide us with a handy `in` operator (syntax `item in list`) that returns `True` if the item is in the list and `False` if it is not.

import random
from wonderwords import RandomWord

SNOWMAN_MIN_WORD_LENGTH = 5
SNOWMAN_MAX_WORD_LENGTH = 8
WRONG_GUESS_ALLOWED = 7

SNOWMAN_1 = '*   *   *  '
SNOWMAN_2 = ' *   _ *   '
SNOWMAN_3 = '   _[_]_ * '
SNOWMAN_4 = '  * (")    '
SNOWMAN_5 = '  \( : )/ *'
SNOWMAN_6 = '* (_ : _)  '
SNOWMAN_7 = '-----------'

def get_letter_from_user(wrong_letter_guess):
  check_letter_inputted = True

  while check_letter_inputted:
    user_input_letter = input("Please enter one letter: ")

    if user_input_letter in wrong_letter_guess:
      print("This letter has already been guess, please try a different letter.\n")
    elif user_input_letter.isalpha() and len(user_input_letter) == 1:
      check_letter_inputted = False
    else:
      print("Invalid input, please enter a single alphabetical character only.\n")

  return user_input_letter
  
  
# pseudocode:
# define a snowman function
# create a r (short for random) variable and assign the RandomWord function to it
# create a snowman word variable and assign the r.word module to start with the word min length variable as the snowman min word length constant, and stop with the word max length variable as the snowman max word length constant
# create a wrong letter guess variable and assign an empty list to it (this will be use to store the wrong letters the user has inputted)
# set up a while loop with the length of the wrong letter guess variable and assign it as less than the wrong guess allowed constant
# (under the while loop), use the user input letter variable (that was created in part 1), and assign the previous function name to it with the wrong letter guess as its parameter
# create an if statement with the user input letter to check if it is in the snowman word variable
# (if it is) create a print statement to show the letter was guess correctly
# (if it is not) create an else statement and print the statement to show that the user input leter is not in the word
# (under the else statement) use the wrong letter guess variable and append it to the user input letter variable (this will add all the wrong letter user has inputted to the empty list)
# (outside of the while loop) call the draw snowman function to get the length of the wrong letter guess (this will how many wrong letters the user has inputted)
# print a statement telling the user what the final correct guess and wrong guess counts are (this step is outside of the while loop)


def snowman():
  r = RandomWord()
  snowman_word = r.word(
    word_min_length=SNOWMAN_MIN_WORD_LENGTH, 
    word_max_length=SNOWMAN_MAX_WORD_LENGTH)

  wrong_letter_guess = []

  while len(wrong_letter_guess) < WRONG_GUESS_ALLOWED:
    user_input_letter = get_letter_from_user(wrong_letter_guess)

    if user_input_letter in snowman_word:
      print("You guessed a correct letter that's in the word. Keep going!\n")
    else:
      print(f"The letter {user_input_letter} is not in the word. Try a different letter!\n")
      wrong_letter_guess.append(user_input_letter)
      
  draw_snowman(len(wrong_letter_guess))
  print(wrong_letter_guess)


# pseucode:
# define a draw snowman function with a wrong guess attempt parameter
# create a for loop with the iterated value is in range (the for loop is use in part 3 because there is a known amount of repetition involve, which is the number of wrong guess allowed)
# set the start of the range to be the wrong guess allowed variable + 1 minus the wrong guess attempt variable (this is so the previous drawing is not repeating itself and only continuing on from where the drawing last left off at)
# set end of the range to be the wrong guess allowed variable + 1 (the +1 is to make it inclusive of the last wrong guess allowed value)
# under the for loop, create an if statement where the iterated value is equal to 1 and create a print statement with the first part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the second part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the third part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the fourth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the fifth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the sixth part of the snowman variable
# create an elif statement and set the iterated value to equal to 2 and create a print statement with the seventh part of the snowman variable
# (if haven't done yet), call the draw snowman function with the wrong guess argument at the end of the else statement in Part 2
# at the end of your code, call the snowman function to run all 3 functions together

def draw_snowman(wrong_guess_attempt):

  for i in range(WRONG_GUESS_ALLOWED + 1 - wrong_guess_attempt, WRONG_GUESS_ALLOWED + 1):
    if i == 1:
      print(SNOWMAN_1)
    elif i == 2:
      print(SNOWMAN_2)
    elif i == 3:
      print(SNOWMAN_3)    
    elif i == 4:
      print(SNOWMAN_4)   
    elif i == 5:
      print(SNOWMAN_5)
    elif i == 6:
      print(SNOWMAN_6)
    elif i == 7:
      print(SNOWMAN_7)


snowman()
